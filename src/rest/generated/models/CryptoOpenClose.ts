/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner } from './V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner';
import {
    V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSON,
    V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSONTyped,
    V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSON,
    V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSONTyped,
} from './V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner';

/**
 * 
 * @export
 * @interface CryptoOpenClose
 */
export interface CryptoOpenClose {
    /**
     * The close price for the symbol in the given time period.
     * @type {number}
     * @memberof CryptoOpenClose
     */
    close: number;
    /**
     * 
     * @type {Array<V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner>}
     * @memberof CryptoOpenClose
     */
    closingTrades: Array<V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner>;
    /**
     * The date requested.
     * @type {Date}
     * @memberof CryptoOpenClose
     */
    day: Date;
    /**
     * Whether or not the timestamps are in UTC timezone.
     * @type {boolean}
     * @memberof CryptoOpenClose
     */
    isUTC: boolean;
    /**
     * The open price for the symbol in the given time period.
     * @type {number}
     * @memberof CryptoOpenClose
     */
    open: number;
    /**
     * 
     * @type {Array<V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner>}
     * @memberof CryptoOpenClose
     */
    openTrades: Array<V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner>;
    /**
     * The symbol pair that was evaluated from the request.
     * @type {string}
     * @memberof CryptoOpenClose
     */
    symbol: string;
}

/**
 * Check if a given object implements the CryptoOpenClose interface.
 */
export function instanceOfCryptoOpenClose(value: object): value is CryptoOpenClose {
    if (!('close' in value) || value['close'] === undefined) return false;
    if (!('closingTrades' in value) || value['closingTrades'] === undefined) return false;
    if (!('day' in value) || value['day'] === undefined) return false;
    if (!('isUTC' in value) || value['isUTC'] === undefined) return false;
    if (!('open' in value) || value['open'] === undefined) return false;
    if (!('openTrades' in value) || value['openTrades'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    return true;
}

export function CryptoOpenCloseFromJSON(json: any): CryptoOpenClose {
    return CryptoOpenCloseFromJSONTyped(json, false);
}

export function CryptoOpenCloseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CryptoOpenClose {
    if (json == null) {
        return json;
    }
    return {
        
        'close': json['close'],
        'closingTrades': ((json['closingTrades'] as Array<any>).map(V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSON)),
        'day': (new Date(json['day'])),
        'isUTC': json['isUTC'],
        'open': json['open'],
        'openTrades': ((json['openTrades'] as Array<any>).map(V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSON)),
        'symbol': json['symbol'],
    };
}

export function CryptoOpenCloseToJSON(json: any): CryptoOpenClose {
    return CryptoOpenCloseToJSONTyped(json, false);
}

export function CryptoOpenCloseToJSONTyped(value?: CryptoOpenClose | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'close': value['close'],
        'closingTrades': ((value['closingTrades'] as Array<any>).map(V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSON)),
        'day': ((value['day']).toISOString().substring(0,10)),
        'isUTC': value['isUTC'],
        'open': value['open'],
        'openTrades': ((value['openTrades'] as Array<any>).map(V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSON)),
        'symbol': value['symbol'],
    };
}

