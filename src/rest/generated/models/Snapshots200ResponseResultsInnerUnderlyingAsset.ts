/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Information on the underlying stock for this options contract.  The market data returned depends on your current stocks plan.
 * @export
 * @interface Snapshots200ResponseResultsInnerUnderlyingAsset
 */
export interface Snapshots200ResponseResultsInnerUnderlyingAsset {
    /**
     * The change in price for the contract to break even.
     * @type {number}
     * @memberof Snapshots200ResponseResultsInnerUnderlyingAsset
     */
    changeToBreakEven: number;
    /**
     * The nanosecond timestamp of when this information was updated.
     * @type {number}
     * @memberof Snapshots200ResponseResultsInnerUnderlyingAsset
     */
    lastUpdated?: number;
    /**
     * The price of the trade. This is the actual dollar value per whole share of this trade. A trade of 100 shares with a price of $2.00 would be worth a total dollar value of $200.00.
     * @type {number}
     * @memberof Snapshots200ResponseResultsInnerUnderlyingAsset
     */
    price?: number;
    /**
     * The ticker symbol for the contract's underlying asset.
     * @type {string}
     * @memberof Snapshots200ResponseResultsInnerUnderlyingAsset
     */
    ticker: string;
    /**
     * The time relevance of the data.
     * @type {string}
     * @memberof Snapshots200ResponseResultsInnerUnderlyingAsset
     */
    timeframe?: Snapshots200ResponseResultsInnerUnderlyingAssetTimeframeEnum;
    /**
     * The value of the underlying index.
     * @type {number}
     * @memberof Snapshots200ResponseResultsInnerUnderlyingAsset
     */
    value?: number;
}


/**
 * @export
 */
export const Snapshots200ResponseResultsInnerUnderlyingAssetTimeframeEnum = {
    Delayed: 'DELAYED',
    RealTime: 'REAL-TIME'
} as const;
export type Snapshots200ResponseResultsInnerUnderlyingAssetTimeframeEnum = typeof Snapshots200ResponseResultsInnerUnderlyingAssetTimeframeEnum[keyof typeof Snapshots200ResponseResultsInnerUnderlyingAssetTimeframeEnum];


/**
 * Check if a given object implements the Snapshots200ResponseResultsInnerUnderlyingAsset interface.
 */
export function instanceOfSnapshots200ResponseResultsInnerUnderlyingAsset(value: object): value is Snapshots200ResponseResultsInnerUnderlyingAsset {
    if (!('changeToBreakEven' in value) || value['changeToBreakEven'] === undefined) return false;
    if (!('ticker' in value) || value['ticker'] === undefined) return false;
    return true;
}

export function Snapshots200ResponseResultsInnerUnderlyingAssetFromJSON(json: any): Snapshots200ResponseResultsInnerUnderlyingAsset {
    return Snapshots200ResponseResultsInnerUnderlyingAssetFromJSONTyped(json, false);
}

export function Snapshots200ResponseResultsInnerUnderlyingAssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Snapshots200ResponseResultsInnerUnderlyingAsset {
    if (json == null) {
        return json;
    }
    return {
        
        'changeToBreakEven': json['change_to_break_even'],
        'lastUpdated': json['last_updated'] == null ? undefined : json['last_updated'],
        'price': json['price'] == null ? undefined : json['price'],
        'ticker': json['ticker'],
        'timeframe': json['timeframe'] == null ? undefined : json['timeframe'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function Snapshots200ResponseResultsInnerUnderlyingAssetToJSON(json: any): Snapshots200ResponseResultsInnerUnderlyingAsset {
    return Snapshots200ResponseResultsInnerUnderlyingAssetToJSONTyped(json, false);
}

export function Snapshots200ResponseResultsInnerUnderlyingAssetToJSONTyped(value?: Snapshots200ResponseResultsInnerUnderlyingAsset | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'change_to_break_even': value['changeToBreakEven'],
        'last_updated': value['lastUpdated'],
        'price': value['price'],
        'ticker': value['ticker'],
        'timeframe': value['timeframe'],
        'value': value['value'],
    };
}

