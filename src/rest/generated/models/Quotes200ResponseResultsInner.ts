/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Quotes200ResponseResultsInner
 */
export interface Quotes200ResponseResultsInner {
    /**
     * The ask exchange ID
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    askExchange?: number;
    /**
     * The ask price.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    askPrice?: number;
    /**
     * The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    askSize?: number;
    /**
     * The bid exchange ID
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    bidExchange?: number;
    /**
     * The bid price.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    bidPrice?: number;
    /**
     * The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    bidSize?: number;
    /**
     * A list of condition codes.
     * @type {Array<number>}
     * @memberof Quotes200ResponseResultsInner
     */
    conditions?: Array<number>;
    /**
     * A list of indicator codes.
     * @type {Array<number>}
     * @memberof Quotes200ResponseResultsInner
     */
    indicators?: Array<number>;
    /**
     * The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    participantTimestamp: number;
    /**
     * The sequence number represents the sequence in which quote events happened.
     * These are increasing and unique per ticker symbol, but will not always be
     * sequential (e.g., 1, 2, 6, 9, 10, 11). Values reset after each trading session/day.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    sequenceNumber: number;
    /**
     * The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this quote from the exchange which produced it.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    sipTimestamp: number;
    /**
     * There are 3 tapes which define which exchange the ticker is listed on. These are integers in our objects which represent the letter of the alphabet. Eg: 1 = A, 2 = B, 3 = C.
     * * Tape A is NYSE listed securities
     * * Tape B is NYSE ARCA / NYSE American
     * * Tape C is NASDAQ
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    tape?: number;
    /**
     * The nanosecond accuracy TRF (Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this quote.
     * @type {number}
     * @memberof Quotes200ResponseResultsInner
     */
    trfTimestamp?: number;
}

/**
 * Check if a given object implements the Quotes200ResponseResultsInner interface.
 */
export function instanceOfQuotes200ResponseResultsInner(value: object): value is Quotes200ResponseResultsInner {
    if (!('participantTimestamp' in value) || value['participantTimestamp'] === undefined) return false;
    if (!('sequenceNumber' in value) || value['sequenceNumber'] === undefined) return false;
    if (!('sipTimestamp' in value) || value['sipTimestamp'] === undefined) return false;
    return true;
}

export function Quotes200ResponseResultsInnerFromJSON(json: any): Quotes200ResponseResultsInner {
    return Quotes200ResponseResultsInnerFromJSONTyped(json, false);
}

export function Quotes200ResponseResultsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Quotes200ResponseResultsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'askExchange': json['ask_exchange'] == null ? undefined : json['ask_exchange'],
        'askPrice': json['ask_price'] == null ? undefined : json['ask_price'],
        'askSize': json['ask_size'] == null ? undefined : json['ask_size'],
        'bidExchange': json['bid_exchange'] == null ? undefined : json['bid_exchange'],
        'bidPrice': json['bid_price'] == null ? undefined : json['bid_price'],
        'bidSize': json['bid_size'] == null ? undefined : json['bid_size'],
        'conditions': json['conditions'] == null ? undefined : json['conditions'],
        'indicators': json['indicators'] == null ? undefined : json['indicators'],
        'participantTimestamp': json['participant_timestamp'],
        'sequenceNumber': json['sequence_number'],
        'sipTimestamp': json['sip_timestamp'],
        'tape': json['tape'] == null ? undefined : json['tape'],
        'trfTimestamp': json['trf_timestamp'] == null ? undefined : json['trf_timestamp'],
    };
}

export function Quotes200ResponseResultsInnerToJSON(json: any): Quotes200ResponseResultsInner {
    return Quotes200ResponseResultsInnerToJSONTyped(json, false);
}

export function Quotes200ResponseResultsInnerToJSONTyped(value?: Quotes200ResponseResultsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ask_exchange': value['askExchange'],
        'ask_price': value['askPrice'],
        'ask_size': value['askSize'],
        'bid_exchange': value['bidExchange'],
        'bid_price': value['bidPrice'],
        'bid_size': value['bidSize'],
        'conditions': value['conditions'],
        'indicators': value['indicators'],
        'participant_timestamp': value['participantTimestamp'],
        'sequence_number': value['sequenceNumber'],
        'sip_timestamp': value['sipTimestamp'],
        'tape': value['tape'],
        'trf_timestamp': value['trfTimestamp'],
    };
}

