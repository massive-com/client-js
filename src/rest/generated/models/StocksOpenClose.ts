/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StocksOpenClose
 */
export interface StocksOpenClose {
    /**
     * The close price of the ticker symbol in after hours trading.
     * @type {number}
     * @memberof StocksOpenClose
     */
    afterHours?: number;
    /**
     * The close price for the symbol in the given time period.
     * @type {number}
     * @memberof StocksOpenClose
     */
    close: number;
    /**
     * The requested date.
     * @type {Date}
     * @memberof StocksOpenClose
     */
    from: Date;
    /**
     * The highest price for the symbol in the given time period.
     * @type {number}
     * @memberof StocksOpenClose
     */
    high: number;
    /**
     * The lowest price for the symbol in the given time period.
     * @type {number}
     * @memberof StocksOpenClose
     */
    low: number;
    /**
     * The open price for the symbol in the given time period.
     * @type {number}
     * @memberof StocksOpenClose
     */
    open: number;
    /**
     * Whether or not this aggregate is for an OTC ticker. This field will be left off if false.
     * @type {boolean}
     * @memberof StocksOpenClose
     */
    otc?: boolean;
    /**
     * The open price of the ticker symbol in pre-market trading.
     * @type {number}
     * @memberof StocksOpenClose
     */
    preMarket?: number;
    /**
     * The status of this request's response.
     * @type {string}
     * @memberof StocksOpenClose
     */
    status: string;
    /**
     * The exchange symbol that this item is traded under.
     * @type {string}
     * @memberof StocksOpenClose
     */
    symbol: string;
    /**
     * The trading volume of the symbol in the given time period.
     * @type {number}
     * @memberof StocksOpenClose
     */
    volume: number;
}

/**
 * Check if a given object implements the StocksOpenClose interface.
 */
export function instanceOfStocksOpenClose(value: object): value is StocksOpenClose {
    if (!('close' in value) || value['close'] === undefined) return false;
    if (!('from' in value) || value['from'] === undefined) return false;
    if (!('high' in value) || value['high'] === undefined) return false;
    if (!('low' in value) || value['low'] === undefined) return false;
    if (!('open' in value) || value['open'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('volume' in value) || value['volume'] === undefined) return false;
    return true;
}

export function StocksOpenCloseFromJSON(json: any): StocksOpenClose {
    return StocksOpenCloseFromJSONTyped(json, false);
}

export function StocksOpenCloseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StocksOpenClose {
    if (json == null) {
        return json;
    }
    return {
        
        'afterHours': json['afterHours'] == null ? undefined : json['afterHours'],
        'close': json['close'],
        'from': (new Date(json['from'])),
        'high': json['high'],
        'low': json['low'],
        'open': json['open'],
        'otc': json['otc'] == null ? undefined : json['otc'],
        'preMarket': json['preMarket'] == null ? undefined : json['preMarket'],
        'status': json['status'],
        'symbol': json['symbol'],
        'volume': json['volume'],
    };
}

export function StocksOpenCloseToJSON(json: any): StocksOpenClose {
    return StocksOpenCloseToJSONTyped(json, false);
}

export function StocksOpenCloseToJSONTyped(value?: StocksOpenClose | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'afterHours': value['afterHours'],
        'close': value['close'],
        'from': ((value['from']).toISOString().substring(0,10)),
        'high': value['high'],
        'low': value['low'],
        'open': value['open'],
        'otc': value['otc'],
        'preMarket': value['preMarket'],
        'status': value['status'],
        'symbol': value['symbol'],
        'volume': value['volume'],
    };
}

