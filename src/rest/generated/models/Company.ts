/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * Indicates if the security is actively listed.  If false, this means the company is no longer listed and cannot be traded.
     * @type {boolean}
     * @memberof Company
     */
    active?: boolean;
    /**
     * The Bloomberg guid for the symbol.
     * @type {string}
     * @memberof Company
     */
    bloomberg?: string;
    /**
     * The name of the company's current CEO.
     * @type {string}
     * @memberof Company
     */
    ceo?: string;
    /**
     * The official CIK guid used for SEC database/filings.
     * @type {string}
     * @memberof Company
     */
    cik?: string;
    /**
     * The country in which the company is registered.
     * @type {string}
     * @memberof Company
     */
    country?: string;
    /**
     * A description of the company and what they do/offer.
     * @type {string}
     * @memberof Company
     */
    description?: string;
    /**
     * The approximate number of employees for the company.
     * @type {number}
     * @memberof Company
     */
    employees?: number;
    /**
     * The symbol's primary exchange.
     * @type {string}
     * @memberof Company
     */
    exchange?: string;
    /**
     * The exchange code (id) of the symbol's primary exchange.
     * @type {string}
     * @memberof Company
     */
    exchangeSymbol?: string;
    /**
     * The OpenFigi project guid for the symbol. (<a rel="nofollow" target="_blank" href="https://openfigi.com/">https://openfigi.com/</a>)
     * @type {string}
     * @memberof Company
     */
    figi?: string;
    /**
     * The street address for the company's headquarters.
     * @type {string}
     * @memberof Company
     */
    hqAddress?: string;
    /**
     * The country in which the company's headquarters is located.
     * @type {string}
     * @memberof Company
     */
    hqCountry?: string;
    /**
     * The state in which the company's headquarters is located.
     * @type {string}
     * @memberof Company
     */
    hqState?: string;
    /**
     * The industry in which the company operates.
     * @type {string}
     * @memberof Company
     */
    industry?: string;
    /**
     * The Legal Entity Identifier (LEI) guid for the symbol. (<a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Legal_Entity_Identifier">https://en.wikipedia.org/wiki/Legal_Entity_Identifier</a>)
     * @type {string}
     * @memberof Company
     */
    lei?: string;
    /**
     * The date that the symbol was listed on the exchange.
     * @type {Date}
     * @memberof Company
     */
    listdate?: Date;
    /**
     * The URL of the entity's logo.
     * @type {string}
     * @memberof Company
     */
    logo?: string;
    /**
     * The current market cap for the company.
     * @type {number}
     * @memberof Company
     */
    marketcap?: number;
    /**
     * The name of the company/entity.
     * @type {string}
     * @memberof Company
     */
    name?: string;
    /**
     * The phone number for the company. This is usually a corporate contact number.
     * @type {string}
     * @memberof Company
     */
    phone?: string;
    /**
     * The sector of the indsutry in which the symbol operates.
     * @type {string}
     * @memberof Company
     */
    sector?: string;
    /**
     * Standard Industrial Classification (SIC) id for the symbol. (<a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Standard_Industrial_Classification">https://en.wikipedia.org/wiki/Legal_Entity_Identifier</a>)
     * @type {number}
     * @memberof Company
     */
    sic?: number;
    /**
     * A list of ticker symbols for similar companies.
     * @type {Array<string>}
     * @memberof Company
     */
    similar?: Array<string>;
    /**
     * The exchange symbol that this item is traded under.
     * @type {string}
     * @memberof Company
     */
    symbol?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Company
     */
    tags?: Array<string>;
    /**
     * The type or class of the security.  (<a alt="Full List of Ticker Types" href="https://polygon.io/docs/stocks/get_v3_reference_tickers_types">Full List of Ticker Types</a>)
     * @type {string}
     * @memberof Company
     */
    type?: string;
    /**
     * The last time this company record was updated.
     * @type {Date}
     * @memberof Company
     */
    updated?: Date;
    /**
     * The URL of the company's website
     * @type {string}
     * @memberof Company
     */
    url?: string;
}

/**
 * Check if a given object implements the Company interface.
 */
export function instanceOfCompany(value: object): value is Company {
    return true;
}

export function CompanyFromJSON(json: any): Company {
    return CompanyFromJSONTyped(json, false);
}

export function CompanyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Company {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'] == null ? undefined : json['active'],
        'bloomberg': json['bloomberg'] == null ? undefined : json['bloomberg'],
        'ceo': json['ceo'] == null ? undefined : json['ceo'],
        'cik': json['cik'] == null ? undefined : json['cik'],
        'country': json['country'] == null ? undefined : json['country'],
        'description': json['description'] == null ? undefined : json['description'],
        'employees': json['employees'] == null ? undefined : json['employees'],
        'exchange': json['exchange'] == null ? undefined : json['exchange'],
        'exchangeSymbol': json['exchangeSymbol'] == null ? undefined : json['exchangeSymbol'],
        'figi': json['figi'] == null ? undefined : json['figi'],
        'hqAddress': json['hq_address'] == null ? undefined : json['hq_address'],
        'hqCountry': json['hq_country'] == null ? undefined : json['hq_country'],
        'hqState': json['hq_state'] == null ? undefined : json['hq_state'],
        'industry': json['industry'] == null ? undefined : json['industry'],
        'lei': json['lei'] == null ? undefined : json['lei'],
        'listdate': json['listdate'] == null ? undefined : (new Date(json['listdate'])),
        'logo': json['logo'] == null ? undefined : json['logo'],
        'marketcap': json['marketcap'] == null ? undefined : json['marketcap'],
        'name': json['name'] == null ? undefined : json['name'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'sector': json['sector'] == null ? undefined : json['sector'],
        'sic': json['sic'] == null ? undefined : json['sic'],
        'similar': json['similar'] == null ? undefined : json['similar'],
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'type': json['type'] == null ? undefined : json['type'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CompanyToJSON(json: any): Company {
    return CompanyToJSONTyped(json, false);
}

export function CompanyToJSONTyped(value?: Company | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'bloomberg': value['bloomberg'],
        'ceo': value['ceo'],
        'cik': value['cik'],
        'country': value['country'],
        'description': value['description'],
        'employees': value['employees'],
        'exchange': value['exchange'],
        'exchangeSymbol': value['exchangeSymbol'],
        'figi': value['figi'],
        'hq_address': value['hqAddress'],
        'hq_country': value['hqCountry'],
        'hq_state': value['hqState'],
        'industry': value['industry'],
        'lei': value['lei'],
        'listdate': value['listdate'] == null ? undefined : ((value['listdate']).toISOString().substring(0,10)),
        'logo': value['logo'],
        'marketcap': value['marketcap'],
        'name': value['name'],
        'phone': value['phone'],
        'sector': value['sector'],
        'sic': value['sic'],
        'similar': value['similar'],
        'symbol': value['symbol'],
        'tags': value['tags'],
        'type': value['type'],
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString().substring(0,10)),
        'url': value['url'],
    };
}

