/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CryptoLastTradeLast } from './CryptoLastTradeLast';
import {
    CryptoLastTradeLastFromJSON,
    CryptoLastTradeLastFromJSONTyped,
    CryptoLastTradeLastToJSON,
    CryptoLastTradeLastToJSONTyped,
} from './CryptoLastTradeLast';

/**
 * 
 * @export
 * @interface CryptoLastTrade
 */
export interface CryptoLastTrade {
    /**
     * 
     * @type {CryptoLastTradeLast}
     * @memberof CryptoLastTrade
     */
    last?: CryptoLastTradeLast;
    /**
     * The symbol pair that was evaluated from the request.
     * @type {string}
     * @memberof CryptoLastTrade
     */
    symbol: string;
}

/**
 * Check if a given object implements the CryptoLastTrade interface.
 */
export function instanceOfCryptoLastTrade(value: object): value is CryptoLastTrade {
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    return true;
}

export function CryptoLastTradeFromJSON(json: any): CryptoLastTrade {
    return CryptoLastTradeFromJSONTyped(json, false);
}

export function CryptoLastTradeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CryptoLastTrade {
    if (json == null) {
        return json;
    }
    return {
        
        'last': json['last'] == null ? undefined : CryptoLastTradeLastFromJSON(json['last']),
        'symbol': json['symbol'],
    };
}

export function CryptoLastTradeToJSON(json: any): CryptoLastTrade {
    return CryptoLastTradeToJSONTyped(json, false);
}

export function CryptoLastTradeToJSONTyped(value?: CryptoLastTrade | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'last': CryptoLastTradeLastToJSON(value['last']),
        'symbol': value['symbol'],
    };
}

