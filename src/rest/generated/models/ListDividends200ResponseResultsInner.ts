/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ListDividends200ResponseResultsInner
 */
export interface ListDividends200ResponseResultsInner {
    /**
     * The cash amount of the dividend per share owned.
     * @type {number}
     * @memberof ListDividends200ResponseResultsInner
     */
    cashAmount: number;
    /**
     * The currency in which the dividend is paid.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    currency?: string;
    /**
     * The date that the dividend was announced.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    declarationDate?: string;
    /**
     * The type of dividend. Dividends that have been paid and/or are expected to be paid on consistent schedules are denoted as CD.
     * Special Cash dividends that have been paid that are infrequent or unusual, and/or can not be expected to occur in the future are denoted as SC.
     * Long-Term and Short-Term capital gain distributions are denoted as LT and ST, respectively.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    dividendType: ListDividends200ResponseResultsInnerDividendTypeEnum;
    /**
     * The date that the stock first trades without the dividend, determined by the exchange.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    exDividendDate: string;
    /**
     * The number of times per year the dividend is paid out.  Possible values are 0 (one-time), 1 (annually), 2 (bi-annually), 4 (quarterly), and 12 (monthly).
     * @type {number}
     * @memberof ListDividends200ResponseResultsInner
     */
    frequency: number;
    /**
     * The unique identifier of the dividend.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    id: string;
    /**
     * The date that the dividend is paid out.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    payDate?: string;
    /**
     * The date that the stock must be held to receive the dividend, set by the company.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    recordDate?: string;
    /**
     * The ticker symbol of the dividend.
     * @type {string}
     * @memberof ListDividends200ResponseResultsInner
     */
    ticker: string;
}


/**
 * @export
 */
export const ListDividends200ResponseResultsInnerDividendTypeEnum = {
    Cd: 'CD',
    Sc: 'SC',
    Lt: 'LT',
    St: 'ST'
} as const;
export type ListDividends200ResponseResultsInnerDividendTypeEnum = typeof ListDividends200ResponseResultsInnerDividendTypeEnum[keyof typeof ListDividends200ResponseResultsInnerDividendTypeEnum];


/**
 * Check if a given object implements the ListDividends200ResponseResultsInner interface.
 */
export function instanceOfListDividends200ResponseResultsInner(value: object): value is ListDividends200ResponseResultsInner {
    if (!('cashAmount' in value) || value['cashAmount'] === undefined) return false;
    if (!('dividendType' in value) || value['dividendType'] === undefined) return false;
    if (!('exDividendDate' in value) || value['exDividendDate'] === undefined) return false;
    if (!('frequency' in value) || value['frequency'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ticker' in value) || value['ticker'] === undefined) return false;
    return true;
}

export function ListDividends200ResponseResultsInnerFromJSON(json: any): ListDividends200ResponseResultsInner {
    return ListDividends200ResponseResultsInnerFromJSONTyped(json, false);
}

export function ListDividends200ResponseResultsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListDividends200ResponseResultsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'cashAmount': json['cash_amount'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'declarationDate': json['declaration_date'] == null ? undefined : json['declaration_date'],
        'dividendType': json['dividend_type'],
        'exDividendDate': json['ex_dividend_date'],
        'frequency': json['frequency'],
        'id': json['id'],
        'payDate': json['pay_date'] == null ? undefined : json['pay_date'],
        'recordDate': json['record_date'] == null ? undefined : json['record_date'],
        'ticker': json['ticker'],
    };
}

export function ListDividends200ResponseResultsInnerToJSON(json: any): ListDividends200ResponseResultsInner {
    return ListDividends200ResponseResultsInnerToJSONTyped(json, false);
}

export function ListDividends200ResponseResultsInnerToJSONTyped(value?: ListDividends200ResponseResultsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cash_amount': value['cashAmount'],
        'currency': value['currency'],
        'declaration_date': value['declarationDate'],
        'dividend_type': value['dividendType'],
        'ex_dividend_date': value['exDividendDate'],
        'frequency': value['frequency'],
        'id': value['id'],
        'pay_date': value['payDate'],
        'record_date': value['recordDate'],
        'ticker': value['ticker'],
    };
}

