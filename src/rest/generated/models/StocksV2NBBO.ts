/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StocksV2NBBOAllOfX } from './StocksV2NBBOAllOfX';
import {
    StocksV2NBBOAllOfXFromJSON,
    StocksV2NBBOAllOfXFromJSONTyped,
    StocksV2NBBOAllOfXToJSON,
    StocksV2NBBOAllOfXToJSONTyped,
} from './StocksV2NBBOAllOfX';

/**
 * 
 * @export
 * @interface StocksV2NBBO
 */
export interface StocksV2NBBO {
    /**
     * The exchange symbol that this item is traded under.
     * @type {string}
     * @memberof StocksV2NBBO
     */
    t: string;
    /**
     * The nanosecond accuracy TRF(Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this message.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    f: number;
    /**
     * The sequence number represents the sequence in which message events happened.
     * These are increasing and unique per ticker symbol, but will not always be
     * sequential (e.g., 1, 2, 6, 9, 10, 11).
     * 
     * @type {number}
     * @memberof StocksV2NBBO
     */
    q: number;
    /**
     * The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this message from the exchange which produced it.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    t: number;
    /**
     * The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    y: number;
    /**
     * The ask price.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    p: number;
    /**
     * The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    s: number;
    /**
     * 
     * @type {StocksV2NBBOAllOfX}
     * @memberof StocksV2NBBO
     */
    x: StocksV2NBBOAllOfX;
    /**
     * A list of condition codes.
     * 
     * @type {Array<number>}
     * @memberof StocksV2NBBO
     */
    c: Array<number>;
    /**
     * The indicators. For more information, see our glossary of [Conditions and
     * Indicators](https://polygon.io/glossary/us/stocks/conditions-indicators).
     * 
     * @type {Array<number>}
     * @memberof StocksV2NBBO
     */
    i: Array<number>;
    /**
     * The bid price.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    p: number;
    /**
     * The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price.
     * @type {number}
     * @memberof StocksV2NBBO
     */
    s: number;
    /**
     * 
     * @type {StocksV2NBBOAllOfX}
     * @memberof StocksV2NBBO
     */
    x: StocksV2NBBOAllOfX;
    /**
     * There are 3 tapes which define which exchange the ticker is listed on. These are integers in our objects which represent the letter of the alphabet. Eg: 1 = A, 2 = B, 3 = C.
     * * Tape A is NYSE listed securities
     * * Tape B is NYSE ARCA / NYSE American
     * * Tape C is NASDAQ
     * 
     * @type {number}
     * @memberof StocksV2NBBO
     */
    z: number;
}

/**
 * Check if a given object implements the StocksV2NBBO interface.
 */
export function instanceOfStocksV2NBBO(value: object): value is StocksV2NBBO {
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('f' in value) || value['f'] === undefined) return false;
    if (!('q' in value) || value['q'] === undefined) return false;
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('y' in value) || value['y'] === undefined) return false;
    if (!('p' in value) || value['p'] === undefined) return false;
    if (!('s' in value) || value['s'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('c' in value) || value['c'] === undefined) return false;
    if (!('i' in value) || value['i'] === undefined) return false;
    if (!('p' in value) || value['p'] === undefined) return false;
    if (!('s' in value) || value['s'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('z' in value) || value['z'] === undefined) return false;
    return true;
}

export function StocksV2NBBOFromJSON(json: any): StocksV2NBBO {
    return StocksV2NBBOFromJSONTyped(json, false);
}

export function StocksV2NBBOFromJSONTyped(json: any, ignoreDiscriminator: boolean): StocksV2NBBO {
    if (json == null) {
        return json;
    }
    return {
        
        't': json['T'],
        'f': json['f'],
        'q': json['q'],
        't': json['t'],
        'y': json['y'],
        'p': json['P'],
        's': json['S'],
        'x': StocksV2NBBOAllOfXFromJSON(json['X']),
        'c': json['c'],
        'i': json['i'],
        'p': json['p'],
        's': json['s'],
        'x': StocksV2NBBOAllOfXFromJSON(json['x']),
        'z': json['z'],
    };
}

export function StocksV2NBBOToJSON(json: any): StocksV2NBBO {
    return StocksV2NBBOToJSONTyped(json, false);
}

export function StocksV2NBBOToJSONTyped(value?: StocksV2NBBO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'T': value['t'],
        'f': value['f'],
        'q': value['q'],
        't': value['t'],
        'y': value['y'],
        'P': value['p'],
        'S': value['s'],
        'X': StocksV2NBBOAllOfXToJSON(value['x']),
        'c': value['c'],
        'i': value['i'],
        'p': value['p'],
        's': value['s'],
        'x': StocksV2NBBOAllOfXToJSON(value['x']),
        'z': value['z'],
    };
}

