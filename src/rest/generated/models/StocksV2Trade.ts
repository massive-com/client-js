/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StocksV2Trade
 */
export interface StocksV2Trade {
    /**
     * The exchange symbol that this item is traded under.
     * @type {string}
     * @memberof StocksV2Trade
     */
    t: string;
    /**
     * The nanosecond accuracy TRF(Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this message.
     * @type {number}
     * @memberof StocksV2Trade
     */
    f: number;
    /**
     * The sequence number represents the sequence in which message events happened.
     * These are increasing and unique per ticker symbol, but will not always be
     * sequential (e.g., 1, 2, 6, 9, 10, 11).
     * 
     * @type {number}
     * @memberof StocksV2Trade
     */
    q: number;
    /**
     * The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this message from the exchange which produced it.
     * @type {number}
     * @memberof StocksV2Trade
     */
    t: number;
    /**
     * The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.
     * @type {number}
     * @memberof StocksV2Trade
     */
    y: number;
    /**
     * A list of condition codes.
     * 
     * @type {Array<number>}
     * @memberof StocksV2Trade
     */
    c: Array<number>;
    /**
     * The trade correction indicator.
     * 
     * @type {number}
     * @memberof StocksV2Trade
     */
    e: number;
    /**
     * The Trade ID which uniquely identifies a trade. These are unique per
     * combination of ticker, exchange, and TRF. For example: A trade for AAPL
     * executed on NYSE and a trade for AAPL executed on NASDAQ could potentially
     * have the same Trade ID.
     * 
     * @type {string}
     * @memberof StocksV2Trade
     */
    i: string;
    /**
     * The price of the trade. This is the actual dollar value per whole share of
     * this trade. A trade of 100 shares with a price of $2.00 would be worth a
     * total dollar value of $200.00.
     * 
     * @type {number}
     * @memberof StocksV2Trade
     */
    p: number;
    /**
     * The ID for the Trade Reporting Facility where the trade took place.
     * 
     * @type {number}
     * @memberof StocksV2Trade
     */
    r: number;
    /**
     * The size of a trade (also known as volume).
     * 
     * @type {number}
     * @memberof StocksV2Trade
     */
    s: number;
    /**
     * The exchange ID. See <a href="https://polygon.io/docs/stocks/get_v3_reference_exchanges" alt="Exchanges">Exchanges</a> for Polygon.io's mapping of exchange IDs.
     * @type {number}
     * @memberof StocksV2Trade
     */
    x: number;
    /**
     * There are 3 tapes which define which exchange the ticker is listed on. These are integers in our objects which represent the letter of the alphabet. Eg: 1 = A, 2 = B, 3 = C.
     * * Tape A is NYSE listed securities
     * * Tape B is NYSE ARCA / NYSE American
     * * Tape C is NASDAQ
     * 
     * @type {number}
     * @memberof StocksV2Trade
     */
    z: number;
}

/**
 * Check if a given object implements the StocksV2Trade interface.
 */
export function instanceOfStocksV2Trade(value: object): value is StocksV2Trade {
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('f' in value) || value['f'] === undefined) return false;
    if (!('q' in value) || value['q'] === undefined) return false;
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('y' in value) || value['y'] === undefined) return false;
    if (!('c' in value) || value['c'] === undefined) return false;
    if (!('e' in value) || value['e'] === undefined) return false;
    if (!('i' in value) || value['i'] === undefined) return false;
    if (!('p' in value) || value['p'] === undefined) return false;
    if (!('r' in value) || value['r'] === undefined) return false;
    if (!('s' in value) || value['s'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('z' in value) || value['z'] === undefined) return false;
    return true;
}

export function StocksV2TradeFromJSON(json: any): StocksV2Trade {
    return StocksV2TradeFromJSONTyped(json, false);
}

export function StocksV2TradeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StocksV2Trade {
    if (json == null) {
        return json;
    }
    return {
        
        't': json['T'],
        'f': json['f'],
        'q': json['q'],
        't': json['t'],
        'y': json['y'],
        'c': json['c'],
        'e': json['e'],
        'i': json['i'],
        'p': json['p'],
        'r': json['r'],
        's': json['s'],
        'x': json['x'],
        'z': json['z'],
    };
}

export function StocksV2TradeToJSON(json: any): StocksV2Trade {
    return StocksV2TradeToJSONTyped(json, false);
}

export function StocksV2TradeToJSONTyped(value?: StocksV2Trade | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'T': value['t'],
        'f': value['f'],
        'q': value['q'],
        't': value['t'],
        'y': value['y'],
        'c': value['c'],
        'e': value['e'],
        'i': value['i'],
        'p': value['p'],
        'r': value['r'],
        's': value['s'],
        'x': value['x'],
        'z': value['z'],
    };
}

