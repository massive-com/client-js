/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
 */
export interface V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner {
    /**
     * A list of condition codes.
     * 
     * @type {Array<number>}
     * @memberof V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
     */
    c: Array<number>;
    /**
     * The Trade ID which uniquely identifies a trade. These are unique per
     * combination of ticker, exchange, and TRF. For example: A trade for AAPL
     * executed on NYSE and a trade for AAPL executed on NASDAQ could potentially
     * have the same Trade ID.
     * 
     * @type {string}
     * @memberof V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
     */
    i: string;
    /**
     * The price of the trade. This is the actual dollar value per whole share of
     * this trade. A trade of 100 shares with a price of $2.00 would be worth a
     * total dollar value of $200.00.
     * 
     * @type {number}
     * @memberof V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
     */
    p: number;
    /**
     * The size of a trade (also known as volume).
     * 
     * @type {number}
     * @memberof V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
     */
    s: number;
    /**
     * The Unix Msec timestamp for the start of the aggregate window.
     * @type {number}
     * @memberof V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
     */
    t: number;
    /**
     * The exchange that this crypto trade happened on.  
     * See <a href="https://polygon.io/docs/crypto/get_v3_reference_exchanges">Exchanges</a> for a mapping of exchanges to IDs.
     * 
     * @type {number}
     * @memberof V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner
     */
    x: number;
}

/**
 * Check if a given object implements the V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner interface.
 */
export function instanceOfV1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner(value: object): value is V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner {
    if (!('c' in value) || value['c'] === undefined) return false;
    if (!('i' in value) || value['i'] === undefined) return false;
    if (!('p' in value) || value['p'] === undefined) return false;
    if (!('s' in value) || value['s'] === undefined) return false;
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    return true;
}

export function V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSON(json: any): V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner {
    return V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSONTyped(json, false);
}

export function V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner {
    if (json == null) {
        return json;
    }
    return {
        
        'c': json['c'],
        'i': json['i'],
        'p': json['p'],
        's': json['s'],
        't': json['t'],
        'x': json['x'],
    };
}

export function V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSON(json: any): V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner {
    return V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSONTyped(json, false);
}

export function V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInnerToJSONTyped(value?: V1HistoricCryptoFromToDateGet200ResponseAllOfTicksInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'c': value['c'],
        'i': value['i'],
        'p': value['p'],
        's': value['s'],
        't': value['t'],
        'x': value['x'],
    };
}

