/* tslint:disable */
/* eslint-disable */
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX } from './V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX';
import {
    V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXFromJSON,
    V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXFromJSONTyped,
    V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXToJSON,
    V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXToJSONTyped,
} from './V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX';

/**
 * 
 * @export
 * @interface V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
 */
export interface V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner {
    /**
     * The exchange symbol that this item is traded under.
     * @type {string}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    t: string;
    /**
     * The nanosecond accuracy TRF(Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this message.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    f: number;
    /**
     * The sequence number represents the sequence in which message events happened.
     * These are increasing and unique per ticker symbol, but will not always be
     * sequential (e.g., 1, 2, 6, 9, 10, 11).
     * 
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    q: number;
    /**
     * The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this message from the exchange which produced it.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    t: number;
    /**
     * The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    y: number;
    /**
     * The ask price.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    p: number;
    /**
     * The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    s: number;
    /**
     * 
     * @type {V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    x: V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX;
    /**
     * A list of condition codes.
     * 
     * @type {Array<number>}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    c: Array<number>;
    /**
     * The indicators. For more information, see our glossary of [Conditions and
     * Indicators](https://polygon.io/glossary/us/stocks/conditions-indicators).
     * 
     * @type {Array<number>}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    i: Array<number>;
    /**
     * The bid price.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    p: number;
    /**
     * The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price.
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    s: number;
    /**
     * 
     * @type {V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    x: V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfX;
    /**
     * There are 3 tapes which define which exchange the ticker is listed on. These are integers in our objects which represent the letter of the alphabet. Eg: 1 = A, 2 = B, 3 = C.
     * * Tape A is NYSE listed securities
     * * Tape B is NYSE ARCA / NYSE American
     * * Tape C is NASDAQ
     * 
     * @type {number}
     * @memberof V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner
     */
    z: number;
}

/**
 * Check if a given object implements the V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner interface.
 */
export function instanceOfV2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner(value: object): value is V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner {
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('f' in value) || value['f'] === undefined) return false;
    if (!('q' in value) || value['q'] === undefined) return false;
    if (!('t' in value) || value['t'] === undefined) return false;
    if (!('y' in value) || value['y'] === undefined) return false;
    if (!('p' in value) || value['p'] === undefined) return false;
    if (!('s' in value) || value['s'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('c' in value) || value['c'] === undefined) return false;
    if (!('i' in value) || value['i'] === undefined) return false;
    if (!('p' in value) || value['p'] === undefined) return false;
    if (!('s' in value) || value['s'] === undefined) return false;
    if (!('x' in value) || value['x'] === undefined) return false;
    if (!('z' in value) || value['z'] === undefined) return false;
    return true;
}

export function V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerFromJSON(json: any): V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner {
    return V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerFromJSONTyped(json, false);
}

export function V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner {
    if (json == null) {
        return json;
    }
    return {
        
        't': json['T'],
        'f': json['f'],
        'q': json['q'],
        't': json['t'],
        'y': json['y'],
        'p': json['P'],
        's': json['S'],
        'x': V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXFromJSON(json['X']),
        'c': json['c'],
        'i': json['i'],
        'p': json['p'],
        's': json['s'],
        'x': V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXFromJSON(json['x']),
        'z': json['z'],
    };
}

export function V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerToJSON(json: any): V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner {
    return V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerToJSONTyped(json, false);
}

export function V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerToJSONTyped(value?: V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'T': value['t'],
        'f': value['f'],
        'q': value['q'],
        't': value['t'],
        'y': value['y'],
        'P': value['p'],
        'S': value['s'],
        'X': V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXToJSON(value['x']),
        'c': value['c'],
        'i': value['i'],
        'p': value['p'],
        's': value['s'],
        'x': V2TicksStocksNbboTickerDateGet200ResponseAllOfResultsInnerAllOfXToJSON(value['x']),
        'z': value['z'],
    };
}

