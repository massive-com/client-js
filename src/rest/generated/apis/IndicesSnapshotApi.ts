import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IndicesSnapshot200Response,
} from '../models/index';
import {
    IndicesSnapshot200ResponseFromJSON,
    IndicesSnapshot200ResponseToJSON,
} from '../models/index';

export interface IndicesSnapshotRequest {
    tickerAnyOf?: string;
    ticker?: string;
    tickerGte?: string;
    tickerGt?: string;
    tickerLte?: string;
    tickerLt?: string;
    order?: IndicesSnapshotOrderEnum;
    limit?: number;
    sort?: IndicesSnapshotSortEnum;
}

/**
 * 
 */
export class IndicesSnapshotApi extends runtime.BaseAPI {

    /**
     * Get a Snapshot of indices data for said tickers
     * Indices Snapshot
     */
    async indicesSnapshotRaw(requestParameters: IndicesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndicesSnapshot200Response>> {
        const queryParameters: any = {};

        if (requestParameters['tickerAnyOf'] != null) {
            queryParameters['ticker.any_of'] = requestParameters['tickerAnyOf'];
        }

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['tickerGte'] != null) {
            queryParameters['ticker.gte'] = requestParameters['tickerGte'];
        }

        if (requestParameters['tickerGt'] != null) {
            queryParameters['ticker.gt'] = requestParameters['tickerGt'];
        }

        if (requestParameters['tickerLte'] != null) {
            queryParameters['ticker.lte'] = requestParameters['tickerLte'];
        }

        if (requestParameters['tickerLt'] != null) {
            queryParameters['ticker.lt'] = requestParameters['tickerLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/snapshot/indices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndicesSnapshot200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a Snapshot of indices data for said tickers
     * Indices Snapshot
     */
    async indicesSnapshot(requestParameters: IndicesSnapshotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndicesSnapshot200Response> {
        const response = await this.indicesSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const IndicesSnapshotOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type IndicesSnapshotOrderEnum = typeof IndicesSnapshotOrderEnum[keyof typeof IndicesSnapshotOrderEnum];
/**
 * @export
 */
export const IndicesSnapshotSortEnum = {
    Ticker: 'ticker'
} as const;
export type IndicesSnapshotSortEnum = typeof IndicesSnapshotSortEnum[keyof typeof IndicesSnapshotSortEnum];
