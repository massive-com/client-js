import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListDividends200Response,
} from '../models/index';
import {
    ListDividends200ResponseFromJSON,
    ListDividends200ResponseToJSON,
} from '../models/index';

export interface ListDividendsRequest {
    ticker?: string;
    exDividendDate?: Date;
    recordDate?: Date;
    declarationDate?: Date;
    payDate?: Date;
    frequency?: ListDividendsFrequencyEnum;
    cashAmount?: number;
    dividendType?: ListDividendsDividendTypeEnum;
    tickerGte?: string;
    tickerGt?: string;
    tickerLte?: string;
    tickerLt?: string;
    exDividendDateGte?: Date;
    exDividendDateGt?: Date;
    exDividendDateLte?: Date;
    exDividendDateLt?: Date;
    recordDateGte?: Date;
    recordDateGt?: Date;
    recordDateLte?: Date;
    recordDateLt?: Date;
    declarationDateGte?: Date;
    declarationDateGt?: Date;
    declarationDateLte?: Date;
    declarationDateLt?: Date;
    payDateGte?: Date;
    payDateGt?: Date;
    payDateLte?: Date;
    payDateLt?: Date;
    cashAmountGte?: number;
    cashAmountGt?: number;
    cashAmountLte?: number;
    cashAmountLt?: number;
    order?: ListDividendsOrderEnum;
    limit?: number;
    sort?: ListDividendsSortEnum;
}

/**
 * 
 */
export class ReferenceDividendsApi extends runtime.BaseAPI {

    /**
     * Get a list of historical cash dividends, including the ticker symbol, declaration date, ex-dividend date, record date, pay date, frequency, and amount.
     * Dividends v3
     */
    async listDividendsRaw(requestParameters: ListDividendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListDividends200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['exDividendDate'] != null) {
            queryParameters['ex_dividend_date'] = (requestParameters['exDividendDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['recordDate'] != null) {
            queryParameters['record_date'] = (requestParameters['recordDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['declarationDate'] != null) {
            queryParameters['declaration_date'] = (requestParameters['declarationDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['payDate'] != null) {
            queryParameters['pay_date'] = (requestParameters['payDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['frequency'] != null) {
            queryParameters['frequency'] = requestParameters['frequency'];
        }

        if (requestParameters['cashAmount'] != null) {
            queryParameters['cash_amount'] = requestParameters['cashAmount'];
        }

        if (requestParameters['dividendType'] != null) {
            queryParameters['dividend_type'] = requestParameters['dividendType'];
        }

        if (requestParameters['tickerGte'] != null) {
            queryParameters['ticker.gte'] = requestParameters['tickerGte'];
        }

        if (requestParameters['tickerGt'] != null) {
            queryParameters['ticker.gt'] = requestParameters['tickerGt'];
        }

        if (requestParameters['tickerLte'] != null) {
            queryParameters['ticker.lte'] = requestParameters['tickerLte'];
        }

        if (requestParameters['tickerLt'] != null) {
            queryParameters['ticker.lt'] = requestParameters['tickerLt'];
        }

        if (requestParameters['exDividendDateGte'] != null) {
            queryParameters['ex_dividend_date.gte'] = (requestParameters['exDividendDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['exDividendDateGt'] != null) {
            queryParameters['ex_dividend_date.gt'] = (requestParameters['exDividendDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['exDividendDateLte'] != null) {
            queryParameters['ex_dividend_date.lte'] = (requestParameters['exDividendDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['exDividendDateLt'] != null) {
            queryParameters['ex_dividend_date.lt'] = (requestParameters['exDividendDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['recordDateGte'] != null) {
            queryParameters['record_date.gte'] = (requestParameters['recordDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['recordDateGt'] != null) {
            queryParameters['record_date.gt'] = (requestParameters['recordDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['recordDateLte'] != null) {
            queryParameters['record_date.lte'] = (requestParameters['recordDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['recordDateLt'] != null) {
            queryParameters['record_date.lt'] = (requestParameters['recordDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['declarationDateGte'] != null) {
            queryParameters['declaration_date.gte'] = (requestParameters['declarationDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['declarationDateGt'] != null) {
            queryParameters['declaration_date.gt'] = (requestParameters['declarationDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['declarationDateLte'] != null) {
            queryParameters['declaration_date.lte'] = (requestParameters['declarationDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['declarationDateLt'] != null) {
            queryParameters['declaration_date.lt'] = (requestParameters['declarationDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['payDateGte'] != null) {
            queryParameters['pay_date.gte'] = (requestParameters['payDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['payDateGt'] != null) {
            queryParameters['pay_date.gt'] = (requestParameters['payDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['payDateLte'] != null) {
            queryParameters['pay_date.lte'] = (requestParameters['payDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['payDateLt'] != null) {
            queryParameters['pay_date.lt'] = (requestParameters['payDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['cashAmountGte'] != null) {
            queryParameters['cash_amount.gte'] = requestParameters['cashAmountGte'];
        }

        if (requestParameters['cashAmountGt'] != null) {
            queryParameters['cash_amount.gt'] = requestParameters['cashAmountGt'];
        }

        if (requestParameters['cashAmountLte'] != null) {
            queryParameters['cash_amount.lte'] = requestParameters['cashAmountLte'];
        }

        if (requestParameters['cashAmountLt'] != null) {
            queryParameters['cash_amount.lt'] = requestParameters['cashAmountLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/reference/dividends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDividends200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of historical cash dividends, including the ticker symbol, declaration date, ex-dividend date, record date, pay date, frequency, and amount.
     * Dividends v3
     */
    async listDividends(requestParameters: ListDividendsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListDividends200Response> {
        const response = await this.listDividendsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListDividendsFrequencyEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_12: 12
} as const;
export type ListDividendsFrequencyEnum = typeof ListDividendsFrequencyEnum[keyof typeof ListDividendsFrequencyEnum];
/**
 * @export
 */
export const ListDividendsDividendTypeEnum = {
    Cd: 'CD',
    Sc: 'SC',
    Lt: 'LT',
    St: 'ST'
} as const;
export type ListDividendsDividendTypeEnum = typeof ListDividendsDividendTypeEnum[keyof typeof ListDividendsDividendTypeEnum];
/**
 * @export
 */
export const ListDividendsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListDividendsOrderEnum = typeof ListDividendsOrderEnum[keyof typeof ListDividendsOrderEnum];
/**
 * @export
 */
export const ListDividendsSortEnum = {
    ExDividendDate: 'ex_dividend_date',
    PayDate: 'pay_date',
    DeclarationDate: 'declaration_date',
    RecordDate: 'record_date',
    CashAmount: 'cash_amount',
    Ticker: 'ticker'
} as const;
export type ListDividendsSortEnum = typeof ListDividendsSortEnum[keyof typeof ListDividendsSortEnum];
