import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListFinancials200Response,
  ListStockSplits200Response,
} from '../models/index';
import {
    ListFinancials200ResponseFromJSON,
    ListFinancials200ResponseToJSON,
    ListStockSplits200ResponseFromJSON,
    ListStockSplits200ResponseToJSON,
} from '../models/index';

export interface ListFinancialsRequest {
    ticker?: string;
    cik?: string;
    companyName?: string;
    sic?: string;
    filingDate?: Date;
    periodOfReportDate?: Date;
    timeframe?: ListFinancialsTimeframeEnum;
    includeSources?: boolean;
    companyNameSearch?: string;
    filingDateGte?: Date;
    filingDateGt?: Date;
    filingDateLte?: Date;
    filingDateLt?: Date;
    periodOfReportDateGte?: Date;
    periodOfReportDateGt?: Date;
    periodOfReportDateLte?: Date;
    periodOfReportDateLt?: Date;
    order?: ListFinancialsOrderEnum;
    limit?: number;
    sort?: ListFinancialsSortEnum;
}

export interface ListStockSplitsRequest {
    ticker?: string;
    executionDate?: Date;
    reverseSplit?: boolean | null;
    tickerGte?: string;
    tickerGt?: string;
    tickerLte?: string;
    tickerLt?: string;
    executionDateGte?: Date;
    executionDateGt?: Date;
    executionDateLte?: Date;
    executionDateLt?: Date;
    order?: ListStockSplitsOrderEnum;
    limit?: number;
    sort?: ListStockSplitsSortEnum;
}

/**
 * 
 */
export class ReferenceStocksApi extends runtime.BaseAPI {

    /**
     * Get historical financial data for a stock ticker. The financials data is extracted from XBRL from company SEC filings using the methodology outlined <a rel=\"noopener noreferrer nofollow\" target=\"_blank\" href=\"http://xbrl.squarespace.com/understanding-sec-xbrl-financi/\">here</a>.
     * Stock Financials vX
     */
    async listFinancialsRaw(requestParameters: ListFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFinancials200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['cik'] != null) {
            queryParameters['cik'] = requestParameters['cik'];
        }

        if (requestParameters['companyName'] != null) {
            queryParameters['company_name'] = requestParameters['companyName'];
        }

        if (requestParameters['sic'] != null) {
            queryParameters['sic'] = requestParameters['sic'];
        }

        if (requestParameters['filingDate'] != null) {
            queryParameters['filing_date'] = (requestParameters['filingDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['periodOfReportDate'] != null) {
            queryParameters['period_of_report_date'] = (requestParameters['periodOfReportDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['timeframe'] != null) {
            queryParameters['timeframe'] = requestParameters['timeframe'];
        }

        if (requestParameters['includeSources'] != null) {
            queryParameters['include_sources'] = requestParameters['includeSources'];
        }

        if (requestParameters['companyNameSearch'] != null) {
            queryParameters['company_name.search'] = requestParameters['companyNameSearch'];
        }

        if (requestParameters['filingDateGte'] != null) {
            queryParameters['filing_date.gte'] = (requestParameters['filingDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['filingDateGt'] != null) {
            queryParameters['filing_date.gt'] = (requestParameters['filingDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['filingDateLte'] != null) {
            queryParameters['filing_date.lte'] = (requestParameters['filingDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['filingDateLt'] != null) {
            queryParameters['filing_date.lt'] = (requestParameters['filingDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['periodOfReportDateGte'] != null) {
            queryParameters['period_of_report_date.gte'] = (requestParameters['periodOfReportDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['periodOfReportDateGt'] != null) {
            queryParameters['period_of_report_date.gt'] = (requestParameters['periodOfReportDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['periodOfReportDateLte'] != null) {
            queryParameters['period_of_report_date.lte'] = (requestParameters['periodOfReportDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['periodOfReportDateLt'] != null) {
            queryParameters['period_of_report_date.lt'] = (requestParameters['periodOfReportDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/vX/reference/financials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFinancials200ResponseFromJSON(jsonValue));
    }

    /**
     * Get historical financial data for a stock ticker. The financials data is extracted from XBRL from company SEC filings using the methodology outlined <a rel=\"noopener noreferrer nofollow\" target=\"_blank\" href=\"http://xbrl.squarespace.com/understanding-sec-xbrl-financi/\">here</a>.
     * Stock Financials vX
     */
    async listFinancials(requestParameters: ListFinancialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFinancials200Response> {
        const response = await this.listFinancialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of historical stock splits, including the ticker symbol, the execution date, and the factors of the split ratio.
     * Stock Splits v3
     */
    async listStockSplitsRaw(requestParameters: ListStockSplitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListStockSplits200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['executionDate'] != null) {
            queryParameters['execution_date'] = (requestParameters['executionDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['reverseSplit'] != null) {
            queryParameters['reverse_split'] = requestParameters['reverseSplit'];
        }

        if (requestParameters['tickerGte'] != null) {
            queryParameters['ticker.gte'] = requestParameters['tickerGte'];
        }

        if (requestParameters['tickerGt'] != null) {
            queryParameters['ticker.gt'] = requestParameters['tickerGt'];
        }

        if (requestParameters['tickerLte'] != null) {
            queryParameters['ticker.lte'] = requestParameters['tickerLte'];
        }

        if (requestParameters['tickerLt'] != null) {
            queryParameters['ticker.lt'] = requestParameters['tickerLt'];
        }

        if (requestParameters['executionDateGte'] != null) {
            queryParameters['execution_date.gte'] = (requestParameters['executionDateGte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['executionDateGt'] != null) {
            queryParameters['execution_date.gt'] = (requestParameters['executionDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['executionDateLte'] != null) {
            queryParameters['execution_date.lte'] = (requestParameters['executionDateLte'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['executionDateLt'] != null) {
            queryParameters['execution_date.lt'] = (requestParameters['executionDateLt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/reference/splits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListStockSplits200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of historical stock splits, including the ticker symbol, the execution date, and the factors of the split ratio.
     * Stock Splits v3
     */
    async listStockSplits(requestParameters: ListStockSplitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListStockSplits200Response> {
        const response = await this.listStockSplitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListFinancialsTimeframeEnum = {
    Annual: 'annual',
    Quarterly: 'quarterly',
    Ttm: 'ttm'
} as const;
export type ListFinancialsTimeframeEnum = typeof ListFinancialsTimeframeEnum[keyof typeof ListFinancialsTimeframeEnum];
/**
 * @export
 */
export const ListFinancialsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListFinancialsOrderEnum = typeof ListFinancialsOrderEnum[keyof typeof ListFinancialsOrderEnum];
/**
 * @export
 */
export const ListFinancialsSortEnum = {
    FilingDate: 'filing_date',
    PeriodOfReportDate: 'period_of_report_date'
} as const;
export type ListFinancialsSortEnum = typeof ListFinancialsSortEnum[keyof typeof ListFinancialsSortEnum];
/**
 * @export
 */
export const ListStockSplitsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListStockSplitsOrderEnum = typeof ListStockSplitsOrderEnum[keyof typeof ListStockSplitsOrderEnum];
/**
 * @export
 */
export const ListStockSplitsSortEnum = {
    ExecutionDate: 'execution_date',
    Ticker: 'ticker'
} as const;
export type ListStockSplitsSortEnum = typeof ListStockSplitsSortEnum[keyof typeof ListStockSplitsSortEnum];
