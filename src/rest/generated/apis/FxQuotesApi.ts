import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QuotesFx200Response,
} from '../models/index';
import {
    QuotesFx200ResponseFromJSON,
    QuotesFx200ResponseToJSON,
} from '../models/index';

export interface QuotesFxRequest {
    fxTicker: string;
    timestamp?: string;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
    order?: QuotesFxOrderEnum;
    limit?: number;
    sort?: QuotesFxSortEnum;
}

/**
 * 
 */
export class FxQuotesApi extends runtime.BaseAPI {

    /**
     * Get BBO quotes for a ticker symbol in a given time range.
     * Quotes (BBO)
     */
    async quotesFxRaw(requestParameters: QuotesFxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuotesFx200Response>> {
        if (requestParameters['fxTicker'] == null) {
            throw new runtime.RequiredError(
                'fxTicker',
                'Required parameter "fxTicker" was null or undefined when calling quotesFx().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/quotes/{fxTicker}`.replace(`{${"fxTicker"}}`, encodeURIComponent(String(requestParameters['fxTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuotesFx200ResponseFromJSON(jsonValue));
    }

    /**
     * Get BBO quotes for a ticker symbol in a given time range.
     * Quotes (BBO)
     */
    async quotesFx(requestParameters: QuotesFxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuotesFx200Response> {
        const response = await this.quotesFxRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const QuotesFxOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type QuotesFxOrderEnum = typeof QuotesFxOrderEnum[keyof typeof QuotesFxOrderEnum];
/**
 * @export
 */
export const QuotesFxSortEnum = {
    Timestamp: 'timestamp'
} as const;
export type QuotesFxSortEnum = typeof QuotesFxSortEnum[keyof typeof QuotesFxSortEnum];
