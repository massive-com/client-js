import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TradesCrypto200Response,
  V1HistoricCryptoFromToDateGet200Response,
} from '../models/index';
import {
    TradesCrypto200ResponseFromJSON,
    TradesCrypto200ResponseToJSON,
    V1HistoricCryptoFromToDateGet200ResponseFromJSON,
    V1HistoricCryptoFromToDateGet200ResponseToJSON,
} from '../models/index';

export interface TradesCryptoRequest {
    cryptoTicker: string;
    timestamp?: string;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
    order?: TradesCryptoOrderEnum;
    limit?: number;
    sort?: TradesCryptoSortEnum;
}

export interface V1HistoricCryptoFromToDateGetRequest {
    from: string;
    to: string;
    date: Date;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class CryptoTradesApi extends runtime.BaseAPI {

    /**
     * Get trades for a crypto ticker symbol in a given time range.
     * Trades
     */
    async tradesCryptoRaw(requestParameters: TradesCryptoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TradesCrypto200Response>> {
        if (requestParameters['cryptoTicker'] == null) {
            throw new runtime.RequiredError(
                'cryptoTicker',
                'Required parameter "cryptoTicker" was null or undefined when calling tradesCrypto().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/trades/{cryptoTicker}`.replace(`{${"cryptoTicker"}}`, encodeURIComponent(String(requestParameters['cryptoTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradesCrypto200ResponseFromJSON(jsonValue));
    }

    /**
     * Get trades for a crypto ticker symbol in a given time range.
     * Trades
     */
    async tradesCrypto(requestParameters: TradesCryptoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TradesCrypto200Response> {
        const response = await this.tradesCryptoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get historic trade ticks for a cryptocurrency pair. 
     * Historic Crypto Trades
     */
    async v1HistoricCryptoFromToDateGetRaw(requestParameters: V1HistoricCryptoFromToDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1HistoricCryptoFromToDateGet200Response>> {
        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling v1HistoricCryptoFromToDateGet().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling v1HistoricCryptoFromToDateGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v1HistoricCryptoFromToDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/historic/crypto/{from}/{to}/{date}`.replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HistoricCryptoFromToDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get historic trade ticks for a cryptocurrency pair. 
     * Historic Crypto Trades
     */
    async v1HistoricCryptoFromToDateGet(requestParameters: V1HistoricCryptoFromToDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1HistoricCryptoFromToDateGet200Response> {
        const response = await this.v1HistoricCryptoFromToDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TradesCryptoOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type TradesCryptoOrderEnum = typeof TradesCryptoOrderEnum[keyof typeof TradesCryptoOrderEnum];
/**
 * @export
 */
export const TradesCryptoSortEnum = {
    Timestamp: 'timestamp'
} as const;
export type TradesCryptoSortEnum = typeof TradesCryptoSortEnum[keyof typeof TradesCryptoSortEnum];
