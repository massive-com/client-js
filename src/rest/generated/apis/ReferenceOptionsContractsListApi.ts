import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListOptionsContracts200Response,
} from '../models/index';
import {
    ListOptionsContracts200ResponseFromJSON,
    ListOptionsContracts200ResponseToJSON,
} from '../models/index';

export interface ListOptionsContractsRequest {
    ticker?: string;
    underlyingTicker?: string;
    contractType?: ListOptionsContractsContractTypeEnum;
    expirationDate?: string;
    asOf?: string;
    strikePrice?: number;
    expired?: boolean;
    underlyingTickerGte?: string;
    underlyingTickerGt?: string;
    underlyingTickerLte?: string;
    underlyingTickerLt?: string;
    expirationDateGte?: string;
    expirationDateGt?: string;
    expirationDateLte?: string;
    expirationDateLt?: string;
    strikePriceGte?: number;
    strikePriceGt?: number;
    strikePriceLte?: number;
    strikePriceLt?: number;
    order?: ListOptionsContractsOrderEnum;
    limit?: number;
    sort?: ListOptionsContractsSortEnum;
}

/**
 * 
 */
export class ReferenceOptionsContractsListApi extends runtime.BaseAPI {

    /**
     * Query for historical options contracts. This provides both active and expired options contracts.
     * Options Contracts
     */
    async listOptionsContractsRaw(requestParameters: ListOptionsContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOptionsContracts200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['underlyingTicker'] != null) {
            queryParameters['underlying_ticker'] = requestParameters['underlyingTicker'];
        }

        if (requestParameters['contractType'] != null) {
            queryParameters['contract_type'] = requestParameters['contractType'];
        }

        if (requestParameters['expirationDate'] != null) {
            queryParameters['expiration_date'] = requestParameters['expirationDate'];
        }

        if (requestParameters['asOf'] != null) {
            queryParameters['as_of'] = requestParameters['asOf'];
        }

        if (requestParameters['strikePrice'] != null) {
            queryParameters['strike_price'] = requestParameters['strikePrice'];
        }

        if (requestParameters['expired'] != null) {
            queryParameters['expired'] = requestParameters['expired'];
        }

        if (requestParameters['underlyingTickerGte'] != null) {
            queryParameters['underlying_ticker.gte'] = requestParameters['underlyingTickerGte'];
        }

        if (requestParameters['underlyingTickerGt'] != null) {
            queryParameters['underlying_ticker.gt'] = requestParameters['underlyingTickerGt'];
        }

        if (requestParameters['underlyingTickerLte'] != null) {
            queryParameters['underlying_ticker.lte'] = requestParameters['underlyingTickerLte'];
        }

        if (requestParameters['underlyingTickerLt'] != null) {
            queryParameters['underlying_ticker.lt'] = requestParameters['underlyingTickerLt'];
        }

        if (requestParameters['expirationDateGte'] != null) {
            queryParameters['expiration_date.gte'] = requestParameters['expirationDateGte'];
        }

        if (requestParameters['expirationDateGt'] != null) {
            queryParameters['expiration_date.gt'] = requestParameters['expirationDateGt'];
        }

        if (requestParameters['expirationDateLte'] != null) {
            queryParameters['expiration_date.lte'] = requestParameters['expirationDateLte'];
        }

        if (requestParameters['expirationDateLt'] != null) {
            queryParameters['expiration_date.lt'] = requestParameters['expirationDateLt'];
        }

        if (requestParameters['strikePriceGte'] != null) {
            queryParameters['strike_price.gte'] = requestParameters['strikePriceGte'];
        }

        if (requestParameters['strikePriceGt'] != null) {
            queryParameters['strike_price.gt'] = requestParameters['strikePriceGt'];
        }

        if (requestParameters['strikePriceLte'] != null) {
            queryParameters['strike_price.lte'] = requestParameters['strikePriceLte'];
        }

        if (requestParameters['strikePriceLt'] != null) {
            queryParameters['strike_price.lt'] = requestParameters['strikePriceLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/reference/options/contracts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOptionsContracts200ResponseFromJSON(jsonValue));
    }

    /**
     * Query for historical options contracts. This provides both active and expired options contracts.
     * Options Contracts
     */
    async listOptionsContracts(requestParameters: ListOptionsContractsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOptionsContracts200Response> {
        const response = await this.listOptionsContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListOptionsContractsContractTypeEnum = {
    Call: 'call',
    Put: 'put'
} as const;
export type ListOptionsContractsContractTypeEnum = typeof ListOptionsContractsContractTypeEnum[keyof typeof ListOptionsContractsContractTypeEnum];
/**
 * @export
 */
export const ListOptionsContractsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListOptionsContractsOrderEnum = typeof ListOptionsContractsOrderEnum[keyof typeof ListOptionsContractsOrderEnum];
/**
 * @export
 */
export const ListOptionsContractsSortEnum = {
    Ticker: 'ticker',
    UnderlyingTicker: 'underlying_ticker',
    ExpirationDate: 'expiration_date',
    StrikePrice: 'strike_price'
} as const;
export type ListOptionsContractsSortEnum = typeof ListOptionsContractsSortEnum[keyof typeof ListOptionsContractsSortEnum];
