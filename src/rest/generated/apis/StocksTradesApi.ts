import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Trades200Response,
  V2TicksStocksTradesTickerDateGet200Response,
} from '../models/index';
import {
    Trades200ResponseFromJSON,
    Trades200ResponseToJSON,
    V2TicksStocksTradesTickerDateGet200ResponseFromJSON,
    V2TicksStocksTradesTickerDateGet200ResponseToJSON,
} from '../models/index';

export interface TradesRequest {
    stockTicker: string;
    timestamp?: string;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
    order?: TradesOrderEnum;
    limit?: number;
    sort?: TradesSortEnum;
}

export interface V2TicksStocksTradesTickerDateGetRequest {
    ticker: string;
    date: Date;
    timestamp?: number;
    timestampLimit?: number;
    reverse?: boolean;
    limit?: number;
}

/**
 * 
 */
export class StocksTradesApi extends runtime.BaseAPI {

    /**
     * Get trades for a ticker symbol in a given time range.
     * Trades
     */
    async tradesRaw(requestParameters: TradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trades200Response>> {
        if (requestParameters['stockTicker'] == null) {
            throw new runtime.RequiredError(
                'stockTicker',
                'Required parameter "stockTicker" was null or undefined when calling trades().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/trades/{stockTicker}`.replace(`{${"stockTicker"}}`, encodeURIComponent(String(requestParameters['stockTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Trades200ResponseFromJSON(jsonValue));
    }

    /**
     * Get trades for a ticker symbol in a given time range.
     * Trades
     */
    async trades(requestParameters: TradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trades200Response> {
        const response = await this.tradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get trades for a given ticker symbol on a specified date. 
     * Trades
     */
    async v2TicksStocksTradesTickerDateGetRaw(requestParameters: V2TicksStocksTradesTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2TicksStocksTradesTickerDateGet200Response>> {
        if (requestParameters['ticker'] == null) {
            throw new runtime.RequiredError(
                'ticker',
                'Required parameter "ticker" was null or undefined when calling v2TicksStocksTradesTickerDateGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v2TicksStocksTradesTickerDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timestampLimit'] != null) {
            queryParameters['timestampLimit'] = requestParameters['timestampLimit'];
        }

        if (requestParameters['reverse'] != null) {
            queryParameters['reverse'] = requestParameters['reverse'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/ticks/stocks/trades/{ticker}/{date}`.replace(`{${"ticker"}}`, encodeURIComponent(String(requestParameters['ticker']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TicksStocksTradesTickerDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get trades for a given ticker symbol on a specified date. 
     * Trades
     */
    async v2TicksStocksTradesTickerDateGet(requestParameters: V2TicksStocksTradesTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2TicksStocksTradesTickerDateGet200Response> {
        const response = await this.v2TicksStocksTradesTickerDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TradesOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type TradesOrderEnum = typeof TradesOrderEnum[keyof typeof TradesOrderEnum];
/**
 * @export
 */
export const TradesSortEnum = {
    Timestamp: 'timestamp'
} as const;
export type TradesSortEnum = typeof TradesSortEnum[keyof typeof TradesSortEnum];
