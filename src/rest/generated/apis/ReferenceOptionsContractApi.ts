import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetOptionsContract200Response,
} from '../models/index';
import {
    GetOptionsContract200ResponseFromJSON,
    GetOptionsContract200ResponseToJSON,
} from '../models/index';

export interface GetOptionsContractRequest {
    optionsTicker: string;
    asOf?: string;
}

/**
 * 
 */
export class ReferenceOptionsContractApi extends runtime.BaseAPI {

    /**
     * Get an options contract
     * Options Contract
     */
    async getOptionsContractRaw(requestParameters: GetOptionsContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOptionsContract200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling getOptionsContract().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['asOf'] != null) {
            queryParameters['as_of'] = requestParameters['asOf'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/reference/options/contracts/{options_ticker}`.replace(`{${"options_ticker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOptionsContract200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an options contract
     * Options Contract
     */
    async getOptionsContract(requestParameters: GetOptionsContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOptionsContract200Response> {
        const response = await this.getOptionsContractRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
