import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTickers200Response,
} from '../models/index';
import {
    ListTickers200ResponseFromJSON,
    ListTickers200ResponseToJSON,
} from '../models/index';

export interface ListTickersRequest {
    ticker?: string;
    type?: ListTickersTypeEnum;
    market?: ListTickersMarketEnum;
    exchange?: string;
    cusip?: string;
    cik?: string;
    date?: Date;
    search?: string;
    active?: boolean;
    tickerGte?: string;
    tickerGt?: string;
    tickerLte?: string;
    tickerLt?: string;
    order?: ListTickersOrderEnum;
    limit?: number;
    sort?: ListTickersSortEnum;
}

/**
 * 
 */
export class ReferenceTickersListApi extends runtime.BaseAPI {

    /**
     * Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities, Indices, Forex, and Crypto.
     * Tickers
     */
    async listTickersRaw(requestParameters: ListTickersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTickers200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['market'] != null) {
            queryParameters['market'] = requestParameters['market'];
        }

        if (requestParameters['exchange'] != null) {
            queryParameters['exchange'] = requestParameters['exchange'];
        }

        if (requestParameters['cusip'] != null) {
            queryParameters['cusip'] = requestParameters['cusip'];
        }

        if (requestParameters['cik'] != null) {
            queryParameters['cik'] = requestParameters['cik'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['tickerGte'] != null) {
            queryParameters['ticker.gte'] = requestParameters['tickerGte'];
        }

        if (requestParameters['tickerGt'] != null) {
            queryParameters['ticker.gt'] = requestParameters['tickerGt'];
        }

        if (requestParameters['tickerLte'] != null) {
            queryParameters['ticker.lte'] = requestParameters['tickerLte'];
        }

        if (requestParameters['tickerLt'] != null) {
            queryParameters['ticker.lt'] = requestParameters['tickerLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/reference/tickers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTickers200ResponseFromJSON(jsonValue));
    }

    /**
     * Query all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities, Indices, Forex, and Crypto.
     * Tickers
     */
    async listTickers(requestParameters: ListTickersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTickers200Response> {
        const response = await this.listTickersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListTickersTypeEnum = {
    Cs: 'CS',
    Adrc: 'ADRC',
    Adrp: 'ADRP',
    Adrr: 'ADRR',
    Unit: 'UNIT',
    Right: 'RIGHT',
    Pfd: 'PFD',
    Fund: 'FUND',
    Sp: 'SP',
    Warrant: 'WARRANT',
    Index: 'INDEX',
    Etf: 'ETF',
    Etn: 'ETN',
    Os: 'OS',
    Gdr: 'GDR',
    Other: 'OTHER',
    Nyrs: 'NYRS',
    Agen: 'AGEN',
    Eqlk: 'EQLK',
    Bond: 'BOND',
    Adrw: 'ADRW',
    Basket: 'BASKET',
    Lt: 'LT'
} as const;
export type ListTickersTypeEnum = typeof ListTickersTypeEnum[keyof typeof ListTickersTypeEnum];
/**
 * @export
 */
export const ListTickersMarketEnum = {
    Stocks: 'stocks',
    Crypto: 'crypto',
    Fx: 'fx',
    Otc: 'otc',
    Indices: 'indices'
} as const;
export type ListTickersMarketEnum = typeof ListTickersMarketEnum[keyof typeof ListTickersMarketEnum];
/**
 * @export
 */
export const ListTickersOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListTickersOrderEnum = typeof ListTickersOrderEnum[keyof typeof ListTickersOrderEnum];
/**
 * @export
 */
export const ListTickersSortEnum = {
    Ticker: 'ticker',
    Name: 'name',
    Market: 'market',
    Locale: 'locale',
    PrimaryExchange: 'primary_exchange',
    Type: 'type',
    CurrencySymbol: 'currency_symbol',
    CurrencyName: 'currency_name',
    BaseCurrencySymbol: 'base_currency_symbol',
    BaseCurrencyName: 'base_currency_name',
    Cik: 'cik',
    CompositeFigi: 'composite_figi',
    ShareClassFigi: 'share_class_figi',
    LastUpdatedUtc: 'last_updated_utc',
    DelistedUtc: 'delisted_utc'
} as const;
export type ListTickersSortEnum = typeof ListTickersSortEnum[keyof typeof ListTickersSortEnum];
