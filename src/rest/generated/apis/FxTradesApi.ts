import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1HistoricForexFromToDateGet200Response,
} from '../models/index';
import {
    V1HistoricForexFromToDateGet200ResponseFromJSON,
    V1HistoricForexFromToDateGet200ResponseToJSON,
} from '../models/index';

export interface V1HistoricForexFromToDateGetRequest {
    from: string;
    to: string;
    date: Date;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class FxTradesApi extends runtime.BaseAPI {

    /**
     * Get historic ticks for a forex currency pair. 
     * Historic Forex Ticks
     */
    async v1HistoricForexFromToDateGetRaw(requestParameters: V1HistoricForexFromToDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1HistoricForexFromToDateGet200Response>> {
        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling v1HistoricForexFromToDateGet().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling v1HistoricForexFromToDateGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v1HistoricForexFromToDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/historic/forex/{from}/{to}/{date}`.replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HistoricForexFromToDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get historic ticks for a forex currency pair. 
     * Historic Forex Ticks
     */
    async v1HistoricForexFromToDateGet(requestParameters: V1HistoricForexFromToDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1HistoricForexFromToDateGet200Response> {
        const response = await this.v1HistoricForexFromToDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
