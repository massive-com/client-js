import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CryptoEMA200Response,
  CryptoMACD200Response,
  CryptoRSI200Response,
  CryptoSMA200Response,
  V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response,
} from '../models/index';
import {
    CryptoEMA200ResponseFromJSON,
    CryptoEMA200ResponseToJSON,
    CryptoMACD200ResponseFromJSON,
    CryptoMACD200ResponseToJSON,
    CryptoRSI200ResponseFromJSON,
    CryptoRSI200ResponseToJSON,
    CryptoSMA200ResponseFromJSON,
    CryptoSMA200ResponseToJSON,
    V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON,
    V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseToJSON,
} from '../models/index';

export interface OptionsEMARequest {
    optionsTicker: string;
    timestamp?: string;
    timespan?: OptionsEMATimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: OptionsEMASeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: OptionsEMAOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface OptionsMACDRequest {
    optionsTicker: string;
    timestamp?: string;
    timespan?: OptionsMACDTimespanEnum;
    adjusted?: boolean;
    shortWindow?: number;
    longWindow?: number;
    signalWindow?: number;
    seriesType?: OptionsMACDSeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: OptionsMACDOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface OptionsRSIRequest {
    optionsTicker: string;
    timestamp?: string;
    timespan?: OptionsRSITimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: OptionsRSISeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: OptionsRSIOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface OptionsSMARequest {
    optionsTicker: string;
    timestamp?: string;
    timespan?: OptionsSMATimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: OptionsSMASeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: OptionsSMAOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface V2AggsTickerOptionsTickerPrevGetRequest {
    optionsTicker: string;
    adjusted?: boolean;
}

export interface V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetRequest {
    optionsTicker: string;
    multiplier: number;
    timespan: V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetTimespanEnum;
    from: string;
    to: string;
    adjusted?: boolean;
    sort?: V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetSortEnum;
    limit?: number;
}

/**
 * 
 */
export class OptionsAggregatesApi extends runtime.BaseAPI {

    /**
     * Get the exponential moving average (EMA) for a ticker symbol over a given time range.
     * Exponential Moving Average (EMA)
     */
    async optionsEMARaw(requestParameters: OptionsEMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoEMA200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling optionsEMA().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/ema/{optionsTicker}`.replace(`{${"optionsTicker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoEMA200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the exponential moving average (EMA) for a ticker symbol over a given time range.
     * Exponential Moving Average (EMA)
     */
    async optionsEMA(requestParameters: OptionsEMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoEMA200Response> {
        const response = await this.optionsEMARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get moving average convergence/divergence (MACD) for a ticker symbol over a given time range.
     * Moving Average Convergence/Divergence (MACD)
     */
    async optionsMACDRaw(requestParameters: OptionsMACDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoMACD200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling optionsMACD().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['shortWindow'] != null) {
            queryParameters['short_window'] = requestParameters['shortWindow'];
        }

        if (requestParameters['longWindow'] != null) {
            queryParameters['long_window'] = requestParameters['longWindow'];
        }

        if (requestParameters['signalWindow'] != null) {
            queryParameters['signal_window'] = requestParameters['signalWindow'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/macd/{optionsTicker}`.replace(`{${"optionsTicker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoMACD200ResponseFromJSON(jsonValue));
    }

    /**
     * Get moving average convergence/divergence (MACD) for a ticker symbol over a given time range.
     * Moving Average Convergence/Divergence (MACD)
     */
    async optionsMACD(requestParameters: OptionsMACDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoMACD200Response> {
        const response = await this.optionsMACDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the relative strength index (RSI) for a ticker symbol over a given time range.
     * Relative Strength Index (RSI)
     */
    async optionsRSIRaw(requestParameters: OptionsRSIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoRSI200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling optionsRSI().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/rsi/{optionsTicker}`.replace(`{${"optionsTicker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoRSI200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the relative strength index (RSI) for a ticker symbol over a given time range.
     * Relative Strength Index (RSI)
     */
    async optionsRSI(requestParameters: OptionsRSIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoRSI200Response> {
        const response = await this.optionsRSIRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the simple moving average (SMA) for a ticker symbol over a given time range.
     * Simple Moving Average (SMA)
     */
    async optionsSMARaw(requestParameters: OptionsSMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoSMA200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling optionsSMA().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/sma/{optionsTicker}`.replace(`{${"optionsTicker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoSMA200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the simple moving average (SMA) for a ticker symbol over a given time range.
     * Simple Moving Average (SMA)
     */
    async optionsSMA(requestParameters: OptionsSMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoSMA200Response> {
        const response = await this.optionsSMARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the previous day\'s open, high, low, and close (OHLC) for the specified option contract. 
     * Previous Close
     */
    async v2AggsTickerOptionsTickerPrevGetRaw(requestParameters: V2AggsTickerOptionsTickerPrevGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling v2AggsTickerOptionsTickerPrevGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/ticker/{optionsTicker}/prev`.replace(`{${"optionsTicker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the previous day\'s open, high, low, and close (OHLC) for the specified option contract. 
     * Previous Close
     */
    async v2AggsTickerOptionsTickerPrevGet(requestParameters: V2AggsTickerOptionsTickerPrevGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response> {
        const response = await this.v2AggsTickerOptionsTickerPrevGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get aggregate bars for an option contract over a given date range in custom time window sizes. <br /> <br /> For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned. 
     * Aggregates (Bars)
     */
    async v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetRaw(requestParameters: V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response>> {
        if (requestParameters['optionsTicker'] == null) {
            throw new runtime.RequiredError(
                'optionsTicker',
                'Required parameter "optionsTicker" was null or undefined when calling v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['multiplier'] == null) {
            throw new runtime.RequiredError(
                'multiplier',
                'Required parameter "multiplier" was null or undefined when calling v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['timespan'] == null) {
            throw new runtime.RequiredError(
                'timespan',
                'Required parameter "timespan" was null or undefined when calling v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/ticker/{optionsTicker}/range/{multiplier}/{timespan}/{from}/{to}`.replace(`{${"optionsTicker"}}`, encodeURIComponent(String(requestParameters['optionsTicker']))).replace(`{${"multiplier"}}`, encodeURIComponent(String(requestParameters['multiplier']))).replace(`{${"timespan"}}`, encodeURIComponent(String(requestParameters['timespan']))).replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get aggregate bars for an option contract over a given date range in custom time window sizes. <br /> <br /> For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned. 
     * Aggregates (Bars)
     */
    async v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGet(requestParameters: V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response> {
        const response = await this.v2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OptionsEMATimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type OptionsEMATimespanEnum = typeof OptionsEMATimespanEnum[keyof typeof OptionsEMATimespanEnum];
/**
 * @export
 */
export const OptionsEMASeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type OptionsEMASeriesTypeEnum = typeof OptionsEMASeriesTypeEnum[keyof typeof OptionsEMASeriesTypeEnum];
/**
 * @export
 */
export const OptionsEMAOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OptionsEMAOrderEnum = typeof OptionsEMAOrderEnum[keyof typeof OptionsEMAOrderEnum];
/**
 * @export
 */
export const OptionsMACDTimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type OptionsMACDTimespanEnum = typeof OptionsMACDTimespanEnum[keyof typeof OptionsMACDTimespanEnum];
/**
 * @export
 */
export const OptionsMACDSeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type OptionsMACDSeriesTypeEnum = typeof OptionsMACDSeriesTypeEnum[keyof typeof OptionsMACDSeriesTypeEnum];
/**
 * @export
 */
export const OptionsMACDOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OptionsMACDOrderEnum = typeof OptionsMACDOrderEnum[keyof typeof OptionsMACDOrderEnum];
/**
 * @export
 */
export const OptionsRSITimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type OptionsRSITimespanEnum = typeof OptionsRSITimespanEnum[keyof typeof OptionsRSITimespanEnum];
/**
 * @export
 */
export const OptionsRSISeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type OptionsRSISeriesTypeEnum = typeof OptionsRSISeriesTypeEnum[keyof typeof OptionsRSISeriesTypeEnum];
/**
 * @export
 */
export const OptionsRSIOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OptionsRSIOrderEnum = typeof OptionsRSIOrderEnum[keyof typeof OptionsRSIOrderEnum];
/**
 * @export
 */
export const OptionsSMATimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type OptionsSMATimespanEnum = typeof OptionsSMATimespanEnum[keyof typeof OptionsSMATimespanEnum];
/**
 * @export
 */
export const OptionsSMASeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type OptionsSMASeriesTypeEnum = typeof OptionsSMASeriesTypeEnum[keyof typeof OptionsSMASeriesTypeEnum];
/**
 * @export
 */
export const OptionsSMAOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OptionsSMAOrderEnum = typeof OptionsSMAOrderEnum[keyof typeof OptionsSMAOrderEnum];
/**
 * @export
 */
export const V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetTimespanEnum = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetTimespanEnum = typeof V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetTimespanEnum[keyof typeof V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetTimespanEnum];
/**
 * @export
 */
export const V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetSortEnum = typeof V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetSortEnum[keyof typeof V2AggsTickerOptionsTickerRangeMultiplierTimespanFromToGetSortEnum];
