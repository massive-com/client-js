import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Quotes200Response,
  V2TicksStocksNbboTickerDateGet200Response,
} from '../models/index';
import {
    Quotes200ResponseFromJSON,
    Quotes200ResponseToJSON,
    V2TicksStocksNbboTickerDateGet200ResponseFromJSON,
    V2TicksStocksNbboTickerDateGet200ResponseToJSON,
} from '../models/index';

export interface QuotesRequest {
    stockTicker: string;
    timestamp?: string;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
    order?: QuotesOrderEnum;
    limit?: number;
    sort?: QuotesSortEnum;
}

export interface V2TicksStocksNbboTickerDateGetRequest {
    ticker: string;
    date: Date;
    timestamp?: number;
    timestampLimit?: number;
    reverse?: boolean;
    limit?: number;
}

/**
 * 
 */
export class StocksQuotesApi extends runtime.BaseAPI {

    /**
     * Get NBBO quotes for a ticker symbol in a given time range.
     * Quotes (NBBO)
     */
    async quotesRaw(requestParameters: QuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quotes200Response>> {
        if (requestParameters['stockTicker'] == null) {
            throw new runtime.RequiredError(
                'stockTicker',
                'Required parameter "stockTicker" was null or undefined when calling quotes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/quotes/{stockTicker}`.replace(`{${"stockTicker"}}`, encodeURIComponent(String(requestParameters['stockTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Quotes200ResponseFromJSON(jsonValue));
    }

    /**
     * Get NBBO quotes for a ticker symbol in a given time range.
     * Quotes (NBBO)
     */
    async quotes(requestParameters: QuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quotes200Response> {
        const response = await this.quotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get NBBO quotes for a given ticker symbol on a specified date. 
     * Quotes (NBBO)
     */
    async v2TicksStocksNbboTickerDateGetRaw(requestParameters: V2TicksStocksNbboTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2TicksStocksNbboTickerDateGet200Response>> {
        if (requestParameters['ticker'] == null) {
            throw new runtime.RequiredError(
                'ticker',
                'Required parameter "ticker" was null or undefined when calling v2TicksStocksNbboTickerDateGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v2TicksStocksNbboTickerDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timestampLimit'] != null) {
            queryParameters['timestampLimit'] = requestParameters['timestampLimit'];
        }

        if (requestParameters['reverse'] != null) {
            queryParameters['reverse'] = requestParameters['reverse'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/ticks/stocks/nbbo/{ticker}/{date}`.replace(`{${"ticker"}}`, encodeURIComponent(String(requestParameters['ticker']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TicksStocksNbboTickerDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get NBBO quotes for a given ticker symbol on a specified date. 
     * Quotes (NBBO)
     */
    async v2TicksStocksNbboTickerDateGet(requestParameters: V2TicksStocksNbboTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2TicksStocksNbboTickerDateGet200Response> {
        const response = await this.v2TicksStocksNbboTickerDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const QuotesOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type QuotesOrderEnum = typeof QuotesOrderEnum[keyof typeof QuotesOrderEnum];
/**
 * @export
 */
export const QuotesSortEnum = {
    Timestamp: 'timestamp'
} as const;
export type QuotesSortEnum = typeof QuotesSortEnum[keyof typeof QuotesSortEnum];
