import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V2SnapshotLocaleGlobalMarketsCryptoDirectionGet200Response,
  V2SnapshotLocaleGlobalMarketsCryptoTickersGet200Response,
  V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet200Response,
  V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet200Response,
} from '../models/index';
import {
    V2SnapshotLocaleGlobalMarketsCryptoDirectionGet200ResponseFromJSON,
    V2SnapshotLocaleGlobalMarketsCryptoDirectionGet200ResponseToJSON,
    V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseFromJSON,
    V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseToJSON,
    V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet200ResponseFromJSON,
    V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet200ResponseToJSON,
    V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet200ResponseFromJSON,
    V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet200ResponseToJSON,
} from '../models/index';

export interface V2SnapshotLocaleGlobalMarketsCryptoDirectionGetRequest {
    direction: V2SnapshotLocaleGlobalMarketsCryptoDirectionGetDirectionEnum;
}

export interface V2SnapshotLocaleGlobalMarketsCryptoTickersGetRequest {
    tickers?: Array<string>;
}

export interface V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetRequest {
    ticker: string;
}

export interface V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetRequest {
    ticker: string;
}

/**
 * 
 */
export class CryptoSnapshotApi extends runtime.BaseAPI {

    /**
     * Get the current top 20 gainers or losers of the day in cryptocurrency markets. <br /> <br /> Top gainers are those tickers whose price has increased by the highest percentage since the previous day\'s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day\'s close. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
     * Gainers/Losers
     */
    async v2SnapshotLocaleGlobalMarketsCryptoDirectionGetRaw(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoDirectionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleGlobalMarketsCryptoDirectionGet200Response>> {
        if (requestParameters['direction'] == null) {
            throw new runtime.RequiredError(
                'direction',
                'Required parameter "direction" was null or undefined when calling v2SnapshotLocaleGlobalMarketsCryptoDirectionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/global/markets/crypto/{direction}`.replace(`{${"direction"}}`, encodeURIComponent(String(requestParameters['direction']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleGlobalMarketsCryptoDirectionGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the current top 20 gainers or losers of the day in cryptocurrency markets. <br /> <br /> Top gainers are those tickers whose price has increased by the highest percentage since the previous day\'s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day\'s close. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
     * Gainers/Losers
     */
    async v2SnapshotLocaleGlobalMarketsCryptoDirectionGet(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoDirectionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleGlobalMarketsCryptoDirectionGet200Response> {
        const response = await this.v2SnapshotLocaleGlobalMarketsCryptoDirectionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
     * All Tickers
     */
    async v2SnapshotLocaleGlobalMarketsCryptoTickersGetRaw(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoTickersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleGlobalMarketsCryptoTickersGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['tickers'] != null) {
            queryParameters['tickers'] = requestParameters['tickers'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/global/markets/crypto/tickers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleGlobalMarketsCryptoTickersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
     * All Tickers
     */
    async v2SnapshotLocaleGlobalMarketsCryptoTickersGet(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoTickersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleGlobalMarketsCryptoTickersGet200Response> {
        const response = await this.v2SnapshotLocaleGlobalMarketsCryptoTickersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
     * Ticker Full Book (L2)
     */
    async v2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetRaw(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet200Response>> {
        if (requestParameters['ticker'] == null) {
            throw new runtime.RequiredError(
                'ticker',
                'Required parameter "ticker" was null or undefined when calling v2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/global/markets/crypto/tickers/{ticker}/book`.replace(`{${"ticker"}}`, encodeURIComponent(String(requestParameters['ticker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the current level 2 book of a single ticker. This is the combined book from all of the exchanges. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
     * Ticker Full Book (L2)
     */
    async v2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGet200Response> {
        const response = await this.v2SnapshotLocaleGlobalMarketsCryptoTickersTickerBookGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
     * Ticker
     */
    async v2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetRaw(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet200Response>> {
        if (requestParameters['ticker'] == null) {
            throw new runtime.RequiredError(
                'ticker',
                'Required parameter "ticker" was null or undefined when calling v2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/global/markets/crypto/tickers/{ticker}`.replace(`{${"ticker"}}`, encodeURIComponent(String(requestParameters['ticker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. <br /> <br /> Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. 
     * Ticker
     */
    async v2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet(requestParameters: V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleGlobalMarketsCryptoTickersTickerGet200Response> {
        const response = await this.v2SnapshotLocaleGlobalMarketsCryptoTickersTickerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const V2SnapshotLocaleGlobalMarketsCryptoDirectionGetDirectionEnum = {
    Gainers: 'gainers',
    Losers: 'losers'
} as const;
export type V2SnapshotLocaleGlobalMarketsCryptoDirectionGetDirectionEnum = typeof V2SnapshotLocaleGlobalMarketsCryptoDirectionGetDirectionEnum[keyof typeof V2SnapshotLocaleGlobalMarketsCryptoDirectionGetDirectionEnum];
