import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetRelatedCompanies200Response,
} from '../models/index';
import {
    GetRelatedCompanies200ResponseFromJSON,
    GetRelatedCompanies200ResponseToJSON,
} from '../models/index';

export interface GetRelatedCompaniesRequest {
    ticker: string;
}

/**
 * 
 */
export class ReferenceRelatedCompaniesApi extends runtime.BaseAPI {

    /**
     * Get a list of tickers related to the queried ticker based on News and Returns data.
     * Related Companies
     */
    async getRelatedCompaniesRaw(requestParameters: GetRelatedCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRelatedCompanies200Response>> {
        if (requestParameters['ticker'] == null) {
            throw new runtime.RequiredError(
                'ticker',
                'Required parameter "ticker" was null or undefined when calling getRelatedCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/related-companies/{ticker}`.replace(`{${"ticker"}}`, encodeURIComponent(String(requestParameters['ticker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRelatedCompanies200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of tickers related to the queried ticker based on News and Returns data.
     * Related Companies
     */
    async getRelatedCompanies(requestParameters: GetRelatedCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRelatedCompanies200Response> {
        const response = await this.getRelatedCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
