import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1OpenCloseIndicesTickerDateGet200Response,
  V1OpenCloseOptionsTickerDateGet200Response,
} from '../models/index';
import {
    V1OpenCloseIndicesTickerDateGet200ResponseFromJSON,
    V1OpenCloseIndicesTickerDateGet200ResponseToJSON,
    V1OpenCloseOptionsTickerDateGet200ResponseFromJSON,
    V1OpenCloseOptionsTickerDateGet200ResponseToJSON,
} from '../models/index';

export interface V1OpenCloseIndicesTickerDateGetRequest {
    indicesTicker: string;
    date: string;
}

export interface V1OpenCloseStocksTickerDateGetRequest {
    stocksTicker: string;
    date: Date;
    adjusted?: boolean;
}

/**
 * 
 */
export class StocksOpenCloseApi extends runtime.BaseAPI {

    /**
     * Get the open, close and afterhours values of a index symbol on a certain date. 
     * Daily Open/Close
     */
    async v1OpenCloseIndicesTickerDateGetRaw(requestParameters: V1OpenCloseIndicesTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OpenCloseIndicesTickerDateGet200Response>> {
        if (requestParameters['indicesTicker'] == null) {
            throw new runtime.RequiredError(
                'indicesTicker',
                'Required parameter "indicesTicker" was null or undefined when calling v1OpenCloseIndicesTickerDateGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v1OpenCloseIndicesTickerDateGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/open-close/{indicesTicker}/{date}`.replace(`{${"indicesTicker"}}`, encodeURIComponent(String(requestParameters['indicesTicker']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OpenCloseIndicesTickerDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the open, close and afterhours values of a index symbol on a certain date. 
     * Daily Open/Close
     */
    async v1OpenCloseIndicesTickerDateGet(requestParameters: V1OpenCloseIndicesTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OpenCloseIndicesTickerDateGet200Response> {
        const response = await this.v1OpenCloseIndicesTickerDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the open, close and afterhours prices of a stock symbol on a certain date. 
     * Daily Open/Close
     */
    async v1OpenCloseStocksTickerDateGetRaw(requestParameters: V1OpenCloseStocksTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OpenCloseOptionsTickerDateGet200Response>> {
        if (requestParameters['stocksTicker'] == null) {
            throw new runtime.RequiredError(
                'stocksTicker',
                'Required parameter "stocksTicker" was null or undefined when calling v1OpenCloseStocksTickerDateGet().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v1OpenCloseStocksTickerDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/open-close/{stocksTicker}/{date}`.replace(`{${"stocksTicker"}}`, encodeURIComponent(String(requestParameters['stocksTicker']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OpenCloseOptionsTickerDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the open, close and afterhours prices of a stock symbol on a certain date. 
     * Daily Open/Close
     */
    async v1OpenCloseStocksTickerDateGet(requestParameters: V1OpenCloseStocksTickerDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OpenCloseOptionsTickerDateGet200Response> {
        const response = await this.v1OpenCloseStocksTickerDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
