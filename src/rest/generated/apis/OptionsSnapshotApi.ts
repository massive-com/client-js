import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OptionContract200Response,
  OptionsChain200Response,
} from '../models/index';
import {
    OptionContract200ResponseFromJSON,
    OptionContract200ResponseToJSON,
    OptionsChain200ResponseFromJSON,
    OptionsChain200ResponseToJSON,
} from '../models/index';

export interface OptionContractRequest {
    underlyingAsset: string;
    optionContract: string;
}

export interface OptionsChainRequest {
    underlyingAsset: string;
    strikePrice?: number;
    expirationDate?: string;
    contractType?: OptionsChainContractTypeEnum;
    strikePriceGte?: number;
    strikePriceGt?: number;
    strikePriceLte?: number;
    strikePriceLt?: number;
    expirationDateGte?: string;
    expirationDateGt?: string;
    expirationDateLte?: string;
    expirationDateLt?: string;
    order?: OptionsChainOrderEnum;
    limit?: number;
    sort?: OptionsChainSortEnum;
}

/**
 * 
 */
export class OptionsSnapshotApi extends runtime.BaseAPI {

    /**
     * Get the snapshot of an option contract for a stock equity.
     * Option Contract
     */
    async optionContractRaw(requestParameters: OptionContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OptionContract200Response>> {
        if (requestParameters['underlyingAsset'] == null) {
            throw new runtime.RequiredError(
                'underlyingAsset',
                'Required parameter "underlyingAsset" was null or undefined when calling optionContract().'
            );
        }

        if (requestParameters['optionContract'] == null) {
            throw new runtime.RequiredError(
                'optionContract',
                'Required parameter "optionContract" was null or undefined when calling optionContract().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/snapshot/options/{underlyingAsset}/{optionContract}`.replace(`{${"underlyingAsset"}}`, encodeURIComponent(String(requestParameters['underlyingAsset']))).replace(`{${"optionContract"}}`, encodeURIComponent(String(requestParameters['optionContract']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionContract200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the snapshot of an option contract for a stock equity.
     * Option Contract
     */
    async optionContract(requestParameters: OptionContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OptionContract200Response> {
        const response = await this.optionContractRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the snapshot of all options contracts for an underlying ticker.
     * Options Chain
     */
    async optionsChainRaw(requestParameters: OptionsChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OptionsChain200Response>> {
        if (requestParameters['underlyingAsset'] == null) {
            throw new runtime.RequiredError(
                'underlyingAsset',
                'Required parameter "underlyingAsset" was null or undefined when calling optionsChain().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['strikePrice'] != null) {
            queryParameters['strike_price'] = requestParameters['strikePrice'];
        }

        if (requestParameters['expirationDate'] != null) {
            queryParameters['expiration_date'] = requestParameters['expirationDate'];
        }

        if (requestParameters['contractType'] != null) {
            queryParameters['contract_type'] = requestParameters['contractType'];
        }

        if (requestParameters['strikePriceGte'] != null) {
            queryParameters['strike_price.gte'] = requestParameters['strikePriceGte'];
        }

        if (requestParameters['strikePriceGt'] != null) {
            queryParameters['strike_price.gt'] = requestParameters['strikePriceGt'];
        }

        if (requestParameters['strikePriceLte'] != null) {
            queryParameters['strike_price.lte'] = requestParameters['strikePriceLte'];
        }

        if (requestParameters['strikePriceLt'] != null) {
            queryParameters['strike_price.lt'] = requestParameters['strikePriceLt'];
        }

        if (requestParameters['expirationDateGte'] != null) {
            queryParameters['expiration_date.gte'] = requestParameters['expirationDateGte'];
        }

        if (requestParameters['expirationDateGt'] != null) {
            queryParameters['expiration_date.gt'] = requestParameters['expirationDateGt'];
        }

        if (requestParameters['expirationDateLte'] != null) {
            queryParameters['expiration_date.lte'] = requestParameters['expirationDateLte'];
        }

        if (requestParameters['expirationDateLt'] != null) {
            queryParameters['expiration_date.lt'] = requestParameters['expirationDateLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/snapshot/options/{underlyingAsset}`.replace(`{${"underlyingAsset"}}`, encodeURIComponent(String(requestParameters['underlyingAsset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionsChain200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the snapshot of all options contracts for an underlying ticker.
     * Options Chain
     */
    async optionsChain(requestParameters: OptionsChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OptionsChain200Response> {
        const response = await this.optionsChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OptionsChainContractTypeEnum = {
    Call: 'call',
    Put: 'put'
} as const;
export type OptionsChainContractTypeEnum = typeof OptionsChainContractTypeEnum[keyof typeof OptionsChainContractTypeEnum];
/**
 * @export
 */
export const OptionsChainOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OptionsChainOrderEnum = typeof OptionsChainOrderEnum[keyof typeof OptionsChainOrderEnum];
/**
 * @export
 */
export const OptionsChainSortEnum = {
    Ticker: 'ticker',
    ExpirationDate: 'expiration_date',
    StrikePrice: 'strike_price'
} as const;
export type OptionsChainSortEnum = typeof OptionsChainSortEnum[keyof typeof OptionsChainSortEnum];
