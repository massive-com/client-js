import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CryptoEMA200Response,
  CryptoMACD200Response,
  CryptoRSI200Response,
  CryptoSMA200Response,
  V2AggsGroupedLocaleUsMarketStocksDateGet200Response,
  V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response,
  V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet200Response,
} from '../models/index';
import {
    CryptoEMA200ResponseFromJSON,
    CryptoEMA200ResponseToJSON,
    CryptoMACD200ResponseFromJSON,
    CryptoMACD200ResponseToJSON,
    CryptoRSI200ResponseFromJSON,
    CryptoRSI200ResponseToJSON,
    CryptoSMA200ResponseFromJSON,
    CryptoSMA200ResponseToJSON,
    V2AggsGroupedLocaleUsMarketStocksDateGet200ResponseFromJSON,
    V2AggsGroupedLocaleUsMarketStocksDateGet200ResponseToJSON,
    V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON,
    V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseToJSON,
    V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON,
    V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet200ResponseToJSON,
} from '../models/index';

export interface EMARequest {
    stockTicker: string;
    timestamp?: string;
    timespan?: EMATimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: EMASeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: EMAOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface MACDRequest {
    stockTicker: string;
    timestamp?: string;
    timespan?: MACDTimespanEnum;
    adjusted?: boolean;
    shortWindow?: number;
    longWindow?: number;
    signalWindow?: number;
    seriesType?: MACDSeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: MACDOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface RSIRequest {
    stockTicker: string;
    timestamp?: string;
    timespan?: RSITimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: RSISeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: RSIOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface SMARequest {
    stockTicker: string;
    timestamp?: string;
    timespan?: SMATimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: SMASeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: SMAOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface V2AggsGroupedLocaleUsMarketStocksDateGetRequest {
    date: string;
    adjusted?: boolean;
    includeOtc?: boolean;
}

export interface V2AggsTickerStocksTickerPrevGetRequest {
    stocksTicker: string;
    adjusted?: boolean;
}

export interface V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetRequest {
    stocksTicker: string;
    multiplier: number;
    timespan: V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetTimespanEnum;
    from: string;
    to: string;
    adjusted?: boolean;
    sort?: V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetSortEnum;
    limit?: number;
}

/**
 * 
 */
export class StocksAggregatesApi extends runtime.BaseAPI {

    /**
     * Get the exponential moving average (EMA) for a ticker symbol over a given time range.
     * Exponential Moving Average (EMA)
     */
    async eMARaw(requestParameters: EMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoEMA200Response>> {
        if (requestParameters['stockTicker'] == null) {
            throw new runtime.RequiredError(
                'stockTicker',
                'Required parameter "stockTicker" was null or undefined when calling eMA().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/ema/{stockTicker}`.replace(`{${"stockTicker"}}`, encodeURIComponent(String(requestParameters['stockTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoEMA200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the exponential moving average (EMA) for a ticker symbol over a given time range.
     * Exponential Moving Average (EMA)
     */
    async eMA(requestParameters: EMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoEMA200Response> {
        const response = await this.eMARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get moving average convergence/divergence (MACD) data for a ticker symbol over a given time range.
     * Moving Average Convergence/Divergence (MACD)
     */
    async mACDRaw(requestParameters: MACDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoMACD200Response>> {
        if (requestParameters['stockTicker'] == null) {
            throw new runtime.RequiredError(
                'stockTicker',
                'Required parameter "stockTicker" was null or undefined when calling mACD().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['shortWindow'] != null) {
            queryParameters['short_window'] = requestParameters['shortWindow'];
        }

        if (requestParameters['longWindow'] != null) {
            queryParameters['long_window'] = requestParameters['longWindow'];
        }

        if (requestParameters['signalWindow'] != null) {
            queryParameters['signal_window'] = requestParameters['signalWindow'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/macd/{stockTicker}`.replace(`{${"stockTicker"}}`, encodeURIComponent(String(requestParameters['stockTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoMACD200ResponseFromJSON(jsonValue));
    }

    /**
     * Get moving average convergence/divergence (MACD) data for a ticker symbol over a given time range.
     * Moving Average Convergence/Divergence (MACD)
     */
    async mACD(requestParameters: MACDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoMACD200Response> {
        const response = await this.mACDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the relative strength index (RSI) for a ticker symbol over a given time range.
     * Relative Strength Index (RSI)
     */
    async rSIRaw(requestParameters: RSIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoRSI200Response>> {
        if (requestParameters['stockTicker'] == null) {
            throw new runtime.RequiredError(
                'stockTicker',
                'Required parameter "stockTicker" was null or undefined when calling rSI().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/rsi/{stockTicker}`.replace(`{${"stockTicker"}}`, encodeURIComponent(String(requestParameters['stockTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoRSI200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the relative strength index (RSI) for a ticker symbol over a given time range.
     * Relative Strength Index (RSI)
     */
    async rSI(requestParameters: RSIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoRSI200Response> {
        const response = await this.rSIRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the simple moving average (SMA) for a ticker symbol over a given time range.
     * Simple Moving Average (SMA)
     */
    async sMARaw(requestParameters: SMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoSMA200Response>> {
        if (requestParameters['stockTicker'] == null) {
            throw new runtime.RequiredError(
                'stockTicker',
                'Required parameter "stockTicker" was null or undefined when calling sMA().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/sma/{stockTicker}`.replace(`{${"stockTicker"}}`, encodeURIComponent(String(requestParameters['stockTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoSMA200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the simple moving average (SMA) for a ticker symbol over a given time range.
     * Simple Moving Average (SMA)
     */
    async sMA(requestParameters: SMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoSMA200Response> {
        const response = await this.sMARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
     * Grouped Daily (Bars)
     */
    async v2AggsGroupedLocaleUsMarketStocksDateGetRaw(requestParameters: V2AggsGroupedLocaleUsMarketStocksDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsGroupedLocaleUsMarketStocksDateGet200Response>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v2AggsGroupedLocaleUsMarketStocksDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['includeOtc'] != null) {
            queryParameters['include_otc'] = requestParameters['includeOtc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/grouped/locale/us/market/stocks/{date}`.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsGroupedLocaleUsMarketStocksDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the daily open, high, low, and close (OHLC) for the entire stocks/equities markets. 
     * Grouped Daily (Bars)
     */
    async v2AggsGroupedLocaleUsMarketStocksDateGet(requestParameters: V2AggsGroupedLocaleUsMarketStocksDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsGroupedLocaleUsMarketStocksDateGet200Response> {
        const response = await this.v2AggsGroupedLocaleUsMarketStocksDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the previous day\'s open, high, low, and close (OHLC) for the specified stock ticker. 
     * Previous Close
     */
    async v2AggsTickerStocksTickerPrevGetRaw(requestParameters: V2AggsTickerStocksTickerPrevGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response>> {
        if (requestParameters['stocksTicker'] == null) {
            throw new runtime.RequiredError(
                'stocksTicker',
                'Required parameter "stocksTicker" was null or undefined when calling v2AggsTickerStocksTickerPrevGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/ticker/{stocksTicker}/prev`.replace(`{${"stocksTicker"}}`, encodeURIComponent(String(requestParameters['stocksTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the previous day\'s open, high, low, and close (OHLC) for the specified stock ticker. 
     * Previous Close
     */
    async v2AggsTickerStocksTickerPrevGet(requestParameters: V2AggsTickerStocksTickerPrevGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response> {
        const response = await this.v2AggsTickerStocksTickerPrevGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get aggregate bars for a stock over a given date range in custom time window sizes. <br /> <br /> For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned. 
     * Aggregates (Bars)
     */
    async v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetRaw(requestParameters: V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet200Response>> {
        if (requestParameters['stocksTicker'] == null) {
            throw new runtime.RequiredError(
                'stocksTicker',
                'Required parameter "stocksTicker" was null or undefined when calling v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['multiplier'] == null) {
            throw new runtime.RequiredError(
                'multiplier',
                'Required parameter "multiplier" was null or undefined when calling v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['timespan'] == null) {
            throw new runtime.RequiredError(
                'timespan',
                'Required parameter "timespan" was null or undefined when calling v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/ticker/{stocksTicker}/range/{multiplier}/{timespan}/{from}/{to}`.replace(`{${"stocksTicker"}}`, encodeURIComponent(String(requestParameters['stocksTicker']))).replace(`{${"multiplier"}}`, encodeURIComponent(String(requestParameters['multiplier']))).replace(`{${"timespan"}}`, encodeURIComponent(String(requestParameters['timespan']))).replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get aggregate bars for a stock over a given date range in custom time window sizes. <br /> <br /> For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned. 
     * Aggregates (Bars)
     */
    async v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet(requestParameters: V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGet200Response> {
        const response = await this.v2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const EMATimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type EMATimespanEnum = typeof EMATimespanEnum[keyof typeof EMATimespanEnum];
/**
 * @export
 */
export const EMASeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type EMASeriesTypeEnum = typeof EMASeriesTypeEnum[keyof typeof EMASeriesTypeEnum];
/**
 * @export
 */
export const EMAOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type EMAOrderEnum = typeof EMAOrderEnum[keyof typeof EMAOrderEnum];
/**
 * @export
 */
export const MACDTimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type MACDTimespanEnum = typeof MACDTimespanEnum[keyof typeof MACDTimespanEnum];
/**
 * @export
 */
export const MACDSeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type MACDSeriesTypeEnum = typeof MACDSeriesTypeEnum[keyof typeof MACDSeriesTypeEnum];
/**
 * @export
 */
export const MACDOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MACDOrderEnum = typeof MACDOrderEnum[keyof typeof MACDOrderEnum];
/**
 * @export
 */
export const RSITimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type RSITimespanEnum = typeof RSITimespanEnum[keyof typeof RSITimespanEnum];
/**
 * @export
 */
export const RSISeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type RSISeriesTypeEnum = typeof RSISeriesTypeEnum[keyof typeof RSISeriesTypeEnum];
/**
 * @export
 */
export const RSIOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type RSIOrderEnum = typeof RSIOrderEnum[keyof typeof RSIOrderEnum];
/**
 * @export
 */
export const SMATimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type SMATimespanEnum = typeof SMATimespanEnum[keyof typeof SMATimespanEnum];
/**
 * @export
 */
export const SMASeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type SMASeriesTypeEnum = typeof SMASeriesTypeEnum[keyof typeof SMASeriesTypeEnum];
/**
 * @export
 */
export const SMAOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type SMAOrderEnum = typeof SMAOrderEnum[keyof typeof SMAOrderEnum];
/**
 * @export
 */
export const V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetTimespanEnum = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetTimespanEnum = typeof V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetTimespanEnum[keyof typeof V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetTimespanEnum];
/**
 * @export
 */
export const V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetSortEnum = typeof V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetSortEnum[keyof typeof V2AggsTickerStocksTickerRangeMultiplierTimespanFromToGetSortEnum];
