import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetEvents200Response,
  GetTicker200Response,
} from '../models/index';
import {
    GetEvents200ResponseFromJSON,
    GetEvents200ResponseToJSON,
    GetTicker200ResponseFromJSON,
    GetTicker200ResponseToJSON,
} from '../models/index';

export interface GetEventsRequest {
    id: string;
    types?: string;
}

export interface GetTickerRequest {
    ticker: string;
    date?: Date;
}

/**
 * 
 */
export class ReferenceTickersGetApi extends runtime.BaseAPI {

    /**
     * Get a timeline of events for the entity associated with the given ticker, CUSIP, or Composite FIGI.
     * Ticker Events
     */
    async getEventsRaw(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEvents200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEvents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/vX/reference/tickers/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEvents200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a timeline of events for the entity associated with the given ticker, CUSIP, or Composite FIGI.
     * Ticker Events
     */
    async getEvents(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEvents200Response> {
        const response = await this.getEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single ticker supported by Polygon.io. This response will have detailed information about the ticker and the company behind it.
     * Ticker Details v3
     */
    async getTickerRaw(requestParameters: GetTickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTicker200Response>> {
        if (requestParameters['ticker'] == null) {
            throw new runtime.RequiredError(
                'ticker',
                'Required parameter "ticker" was null or undefined when calling getTicker().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v3/reference/tickers/{ticker}`.replace(`{${"ticker"}}`, encodeURIComponent(String(requestParameters['ticker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTicker200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a single ticker supported by Polygon.io. This response will have detailed information about the ticker and the company behind it.
     * Ticker Details v3
     */
    async getTicker(requestParameters: GetTickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTicker200Response> {
        const response = await this.getTickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
