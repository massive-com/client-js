import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListNews200Response,
  ListNewsPublishedUtcParameter,
} from '../models/index';
import {
    ListNews200ResponseFromJSON,
    ListNews200ResponseToJSON,
    ListNewsPublishedUtcParameterFromJSON,
    ListNewsPublishedUtcParameterToJSON,
} from '../models/index';

export interface ListNewsRequest {
    ticker?: string;
    publishedUtc?: ListNewsPublishedUtcParameter;
    tickerGte?: string;
    tickerGt?: string;
    tickerLte?: string;
    tickerLt?: string;
    publishedUtcGte?: ListNewsPublishedUtcParameter;
    publishedUtcGt?: ListNewsPublishedUtcParameter;
    publishedUtcLte?: ListNewsPublishedUtcParameter;
    publishedUtcLt?: ListNewsPublishedUtcParameter;
    order?: ListNewsOrderEnum;
    limit?: number;
    sort?: ListNewsSortEnum;
}

/**
 * 
 */
export class ReferenceNewsApi extends runtime.BaseAPI {

    /**
     * Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source.
     * Ticker News
     */
    async listNewsRaw(requestParameters: ListNewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListNews200Response>> {
        const queryParameters: any = {};

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        if (requestParameters['publishedUtc'] != null) {
            queryParameters['published_utc'] = requestParameters['publishedUtc'];
        }

        if (requestParameters['tickerGte'] != null) {
            queryParameters['ticker.gte'] = requestParameters['tickerGte'];
        }

        if (requestParameters['tickerGt'] != null) {
            queryParameters['ticker.gt'] = requestParameters['tickerGt'];
        }

        if (requestParameters['tickerLte'] != null) {
            queryParameters['ticker.lte'] = requestParameters['tickerLte'];
        }

        if (requestParameters['tickerLt'] != null) {
            queryParameters['ticker.lt'] = requestParameters['tickerLt'];
        }

        if (requestParameters['publishedUtcGte'] != null) {
            queryParameters['published_utc.gte'] = requestParameters['publishedUtcGte'];
        }

        if (requestParameters['publishedUtcGt'] != null) {
            queryParameters['published_utc.gt'] = requestParameters['publishedUtcGt'];
        }

        if (requestParameters['publishedUtcLte'] != null) {
            queryParameters['published_utc.lte'] = requestParameters['publishedUtcLte'];
        }

        if (requestParameters['publishedUtcLt'] != null) {
            queryParameters['published_utc.lt'] = requestParameters['publishedUtcLt'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/reference/news`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNews200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source.
     * Ticker News
     */
    async listNews(requestParameters: ListNewsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListNews200Response> {
        const response = await this.listNewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListNewsOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListNewsOrderEnum = typeof ListNewsOrderEnum[keyof typeof ListNewsOrderEnum];
/**
 * @export
 */
export const ListNewsSortEnum = {
    PublishedUtc: 'published_utc'
} as const;
export type ListNewsSortEnum = typeof ListNewsSortEnum[keyof typeof ListNewsSortEnum];
