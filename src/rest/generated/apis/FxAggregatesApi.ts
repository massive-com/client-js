import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CryptoEMA200Response,
  CryptoMACD200Response,
  CryptoRSI200Response,
  CryptoSMA200Response,
  V2AggsGroupedLocaleGlobalMarketCryptoDateGet200Response,
  V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response,
  V2AggsTickerForexTickerPrevGet200Response,
} from '../models/index';
import {
    CryptoEMA200ResponseFromJSON,
    CryptoEMA200ResponseToJSON,
    CryptoMACD200ResponseFromJSON,
    CryptoMACD200ResponseToJSON,
    CryptoRSI200ResponseFromJSON,
    CryptoRSI200ResponseToJSON,
    CryptoSMA200ResponseFromJSON,
    CryptoSMA200ResponseToJSON,
    V2AggsGroupedLocaleGlobalMarketCryptoDateGet200ResponseFromJSON,
    V2AggsGroupedLocaleGlobalMarketCryptoDateGet200ResponseToJSON,
    V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON,
    V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseToJSON,
    V2AggsTickerForexTickerPrevGet200ResponseFromJSON,
    V2AggsTickerForexTickerPrevGet200ResponseToJSON,
} from '../models/index';

export interface ForexEMARequest {
    fxTicker: string;
    timestamp?: string;
    timespan?: ForexEMATimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: ForexEMASeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: ForexEMAOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface ForexMACDRequest {
    fxTicker: string;
    timestamp?: string;
    timespan?: ForexMACDTimespanEnum;
    adjusted?: boolean;
    shortWindow?: number;
    longWindow?: number;
    signalWindow?: number;
    seriesType?: ForexMACDSeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: ForexMACDOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface ForexRSIRequest {
    fxTicker: string;
    timestamp?: string;
    timespan?: ForexRSITimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: ForexRSISeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: ForexRSIOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface ForexSMARequest {
    fxTicker: string;
    timestamp?: string;
    timespan?: ForexSMATimespanEnum;
    adjusted?: boolean;
    window?: number;
    seriesType?: ForexSMASeriesTypeEnum;
    expandUnderlying?: boolean;
    order?: ForexSMAOrderEnum;
    limit?: number;
    timestampGte?: string;
    timestampGt?: string;
    timestampLte?: string;
    timestampLt?: string;
}

export interface V2AggsGroupedLocaleGlobalMarketFxDateGetRequest {
    date: string;
    adjusted?: boolean;
}

export interface V2AggsTickerForexTickerPrevGetRequest {
    forexTicker: string;
    adjusted?: boolean;
}

export interface V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetRequest {
    forexTicker: string;
    multiplier: number;
    timespan: V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetTimespanEnum;
    from: string;
    to: string;
    adjusted?: boolean;
    sort?: V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetSortEnum;
    limit?: number;
}

/**
 * 
 */
export class FxAggregatesApi extends runtime.BaseAPI {

    /**
     * Get the exponential moving average (EMA) for a ticker symbol over a given time range.
     * Exponential Moving Average (EMA)
     */
    async forexEMARaw(requestParameters: ForexEMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoEMA200Response>> {
        if (requestParameters['fxTicker'] == null) {
            throw new runtime.RequiredError(
                'fxTicker',
                'Required parameter "fxTicker" was null or undefined when calling forexEMA().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/ema/{fxTicker}`.replace(`{${"fxTicker"}}`, encodeURIComponent(String(requestParameters['fxTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoEMA200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the exponential moving average (EMA) for a ticker symbol over a given time range.
     * Exponential Moving Average (EMA)
     */
    async forexEMA(requestParameters: ForexEMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoEMA200Response> {
        const response = await this.forexEMARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get moving average convergence/divergence (MACD) data for a ticker symbol over a given time range.
     * Moving Average Convergence/Divergence (MACD)
     */
    async forexMACDRaw(requestParameters: ForexMACDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoMACD200Response>> {
        if (requestParameters['fxTicker'] == null) {
            throw new runtime.RequiredError(
                'fxTicker',
                'Required parameter "fxTicker" was null or undefined when calling forexMACD().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['shortWindow'] != null) {
            queryParameters['short_window'] = requestParameters['shortWindow'];
        }

        if (requestParameters['longWindow'] != null) {
            queryParameters['long_window'] = requestParameters['longWindow'];
        }

        if (requestParameters['signalWindow'] != null) {
            queryParameters['signal_window'] = requestParameters['signalWindow'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/macd/{fxTicker}`.replace(`{${"fxTicker"}}`, encodeURIComponent(String(requestParameters['fxTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoMACD200ResponseFromJSON(jsonValue));
    }

    /**
     * Get moving average convergence/divergence (MACD) data for a ticker symbol over a given time range.
     * Moving Average Convergence/Divergence (MACD)
     */
    async forexMACD(requestParameters: ForexMACDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoMACD200Response> {
        const response = await this.forexMACDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the relative strength index (RSI) for a ticker symbol over a given time range.
     * Relative Strength Index (RSI)
     */
    async forexRSIRaw(requestParameters: ForexRSIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoRSI200Response>> {
        if (requestParameters['fxTicker'] == null) {
            throw new runtime.RequiredError(
                'fxTicker',
                'Required parameter "fxTicker" was null or undefined when calling forexRSI().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/rsi/{fxTicker}`.replace(`{${"fxTicker"}}`, encodeURIComponent(String(requestParameters['fxTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoRSI200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the relative strength index (RSI) for a ticker symbol over a given time range.
     * Relative Strength Index (RSI)
     */
    async forexRSI(requestParameters: ForexRSIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoRSI200Response> {
        const response = await this.forexRSIRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the simple moving average (SMA) for a ticker symbol over a given time range.
     * Simple Moving Average (SMA)
     */
    async forexSMARaw(requestParameters: ForexSMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoSMA200Response>> {
        if (requestParameters['fxTicker'] == null) {
            throw new runtime.RequiredError(
                'fxTicker',
                'Required parameter "fxTicker" was null or undefined when calling forexSMA().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['timespan'] != null) {
            queryParameters['timespan'] = requestParameters['timespan'];
        }

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['window'] != null) {
            queryParameters['window'] = requestParameters['window'];
        }

        if (requestParameters['seriesType'] != null) {
            queryParameters['series_type'] = requestParameters['seriesType'];
        }

        if (requestParameters['expandUnderlying'] != null) {
            queryParameters['expand_underlying'] = requestParameters['expandUnderlying'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['timestampGte'] != null) {
            queryParameters['timestamp.gte'] = requestParameters['timestampGte'];
        }

        if (requestParameters['timestampGt'] != null) {
            queryParameters['timestamp.gt'] = requestParameters['timestampGt'];
        }

        if (requestParameters['timestampLte'] != null) {
            queryParameters['timestamp.lte'] = requestParameters['timestampLte'];
        }

        if (requestParameters['timestampLt'] != null) {
            queryParameters['timestamp.lt'] = requestParameters['timestampLt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v1/indicators/sma/{fxTicker}`.replace(`{${"fxTicker"}}`, encodeURIComponent(String(requestParameters['fxTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoSMA200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the simple moving average (SMA) for a ticker symbol over a given time range.
     * Simple Moving Average (SMA)
     */
    async forexSMA(requestParameters: ForexSMARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoSMA200Response> {
        const response = await this.forexSMARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
     * Grouped Daily (Bars)
     */
    async v2AggsGroupedLocaleGlobalMarketFxDateGetRaw(requestParameters: V2AggsGroupedLocaleGlobalMarketFxDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsGroupedLocaleGlobalMarketCryptoDateGet200Response>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling v2AggsGroupedLocaleGlobalMarketFxDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/grouped/locale/global/market/fx/{date}`.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsGroupedLocaleGlobalMarketCryptoDateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the daily open, high, low, and close (OHLC) for the entire forex markets. 
     * Grouped Daily (Bars)
     */
    async v2AggsGroupedLocaleGlobalMarketFxDateGet(requestParameters: V2AggsGroupedLocaleGlobalMarketFxDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsGroupedLocaleGlobalMarketCryptoDateGet200Response> {
        const response = await this.v2AggsGroupedLocaleGlobalMarketFxDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the previous day\'s open, high, low, and close (OHLC) for the specified forex pair. 
     * Previous Close
     */
    async v2AggsTickerForexTickerPrevGetRaw(requestParameters: V2AggsTickerForexTickerPrevGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsTickerForexTickerPrevGet200Response>> {
        if (requestParameters['forexTicker'] == null) {
            throw new runtime.RequiredError(
                'forexTicker',
                'Required parameter "forexTicker" was null or undefined when calling v2AggsTickerForexTickerPrevGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/ticker/{forexTicker}/prev`.replace(`{${"forexTicker"}}`, encodeURIComponent(String(requestParameters['forexTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsTickerForexTickerPrevGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the previous day\'s open, high, low, and close (OHLC) for the specified forex pair. 
     * Previous Close
     */
    async v2AggsTickerForexTickerPrevGet(requestParameters: V2AggsTickerForexTickerPrevGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsTickerForexTickerPrevGet200Response> {
        const response = await this.v2AggsTickerForexTickerPrevGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get aggregate bars for a forex pair over a given date range in custom time window sizes. <br /> <br /> For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned. 
     * Aggregates (Bars)
     */
    async v2AggsTickerForexTickerRangeMultiplierTimespanFromToGetRaw(requestParameters: V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response>> {
        if (requestParameters['forexTicker'] == null) {
            throw new runtime.RequiredError(
                'forexTicker',
                'Required parameter "forexTicker" was null or undefined when calling v2AggsTickerForexTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['multiplier'] == null) {
            throw new runtime.RequiredError(
                'multiplier',
                'Required parameter "multiplier" was null or undefined when calling v2AggsTickerForexTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['timespan'] == null) {
            throw new runtime.RequiredError(
                'timespan',
                'Required parameter "timespan" was null or undefined when calling v2AggsTickerForexTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling v2AggsTickerForexTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling v2AggsTickerForexTickerRangeMultiplierTimespanFromToGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjusted'] != null) {
            queryParameters['adjusted'] = requestParameters['adjusted'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/aggs/ticker/{forexTicker}/range/{multiplier}/{timespan}/{from}/{to}`.replace(`{${"forexTicker"}}`, encodeURIComponent(String(requestParameters['forexTicker']))).replace(`{${"multiplier"}}`, encodeURIComponent(String(requestParameters['multiplier']))).replace(`{${"timespan"}}`, encodeURIComponent(String(requestParameters['timespan']))).replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from']))).replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get aggregate bars for a forex pair over a given date range in custom time window sizes. <br /> <br /> For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned. 
     * Aggregates (Bars)
     */
    async v2AggsTickerForexTickerRangeMultiplierTimespanFromToGet(requestParameters: V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2AggsTickerCryptoTickerRangeMultiplierTimespanFromToGet200Response> {
        const response = await this.v2AggsTickerForexTickerRangeMultiplierTimespanFromToGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ForexEMATimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type ForexEMATimespanEnum = typeof ForexEMATimespanEnum[keyof typeof ForexEMATimespanEnum];
/**
 * @export
 */
export const ForexEMASeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type ForexEMASeriesTypeEnum = typeof ForexEMASeriesTypeEnum[keyof typeof ForexEMASeriesTypeEnum];
/**
 * @export
 */
export const ForexEMAOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ForexEMAOrderEnum = typeof ForexEMAOrderEnum[keyof typeof ForexEMAOrderEnum];
/**
 * @export
 */
export const ForexMACDTimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type ForexMACDTimespanEnum = typeof ForexMACDTimespanEnum[keyof typeof ForexMACDTimespanEnum];
/**
 * @export
 */
export const ForexMACDSeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type ForexMACDSeriesTypeEnum = typeof ForexMACDSeriesTypeEnum[keyof typeof ForexMACDSeriesTypeEnum];
/**
 * @export
 */
export const ForexMACDOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ForexMACDOrderEnum = typeof ForexMACDOrderEnum[keyof typeof ForexMACDOrderEnum];
/**
 * @export
 */
export const ForexRSITimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type ForexRSITimespanEnum = typeof ForexRSITimespanEnum[keyof typeof ForexRSITimespanEnum];
/**
 * @export
 */
export const ForexRSISeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type ForexRSISeriesTypeEnum = typeof ForexRSISeriesTypeEnum[keyof typeof ForexRSISeriesTypeEnum];
/**
 * @export
 */
export const ForexRSIOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ForexRSIOrderEnum = typeof ForexRSIOrderEnum[keyof typeof ForexRSIOrderEnum];
/**
 * @export
 */
export const ForexSMATimespanEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type ForexSMATimespanEnum = typeof ForexSMATimespanEnum[keyof typeof ForexSMATimespanEnum];
/**
 * @export
 */
export const ForexSMASeriesTypeEnum = {
    Open: 'open',
    High: 'high',
    Low: 'low',
    Close: 'close'
} as const;
export type ForexSMASeriesTypeEnum = typeof ForexSMASeriesTypeEnum[keyof typeof ForexSMASeriesTypeEnum];
/**
 * @export
 */
export const ForexSMAOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ForexSMAOrderEnum = typeof ForexSMAOrderEnum[keyof typeof ForexSMAOrderEnum];
/**
 * @export
 */
export const V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetTimespanEnum = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;
export type V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetTimespanEnum = typeof V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetTimespanEnum[keyof typeof V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetTimespanEnum];
/**
 * @export
 */
export const V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetSortEnum = typeof V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetSortEnum[keyof typeof V2AggsTickerForexTickerRangeMultiplierTimespanFromToGetSortEnum];
