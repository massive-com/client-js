import getWithGlobals from "../../transport/getWithGlobals";
/**
 * Polygon API
 * The future of fintech.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V2SnapshotLocaleUsMarketsStocksDirectionGet200Response,
  V2SnapshotLocaleUsMarketsStocksTickersGet200Response,
  V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet200Response,
} from '../models/index';
import {
    V2SnapshotLocaleUsMarketsStocksDirectionGet200ResponseFromJSON,
    V2SnapshotLocaleUsMarketsStocksDirectionGet200ResponseToJSON,
    V2SnapshotLocaleUsMarketsStocksTickersGet200ResponseFromJSON,
    V2SnapshotLocaleUsMarketsStocksTickersGet200ResponseToJSON,
    V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet200ResponseFromJSON,
    V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet200ResponseToJSON,
} from '../models/index';

export interface V2SnapshotLocaleUsMarketsStocksDirectionGetRequest {
    direction: V2SnapshotLocaleUsMarketsStocksDirectionGetDirectionEnum;
    includeOtc?: boolean;
}

export interface V2SnapshotLocaleUsMarketsStocksTickersGetRequest {
    tickers?: Array<string>;
    includeOtc?: boolean;
}

export interface V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetRequest {
    stocksTicker: string;
}

/**
 * 
 */
export class StocksSnapshotApi extends runtime.BaseAPI {

    /**
     * Get the most up-to-date market data for the current top 20 gainers or losers of the day in the stocks/equities markets. <br /> <br /> Top gainers are those tickers whose price has increased by the highest percentage since the previous day\'s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day\'s close. This output will only include tickers with a trading volume of 10,000 or more. <br /> <br /> Note: Snapshot data is cleared at 3:30am EST and gets populated as data is received from the exchanges. 
     * Gainers/Losers
     */
    async v2SnapshotLocaleUsMarketsStocksDirectionGetRaw(requestParameters: V2SnapshotLocaleUsMarketsStocksDirectionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleUsMarketsStocksDirectionGet200Response>> {
        if (requestParameters['direction'] == null) {
            throw new runtime.RequiredError(
                'direction',
                'Required parameter "direction" was null or undefined when calling v2SnapshotLocaleUsMarketsStocksDirectionGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeOtc'] != null) {
            queryParameters['include_otc'] = requestParameters['includeOtc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/us/markets/stocks/{direction}`.replace(`{${"direction"}}`, encodeURIComponent(String(requestParameters['direction']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleUsMarketsStocksDirectionGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the most up-to-date market data for the current top 20 gainers or losers of the day in the stocks/equities markets. <br /> <br /> Top gainers are those tickers whose price has increased by the highest percentage since the previous day\'s close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day\'s close. This output will only include tickers with a trading volume of 10,000 or more. <br /> <br /> Note: Snapshot data is cleared at 3:30am EST and gets populated as data is received from the exchanges. 
     * Gainers/Losers
     */
    async v2SnapshotLocaleUsMarketsStocksDirectionGet(requestParameters: V2SnapshotLocaleUsMarketsStocksDirectionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleUsMarketsStocksDirectionGet200Response> {
        const response = await this.v2SnapshotLocaleUsMarketsStocksDirectionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the most up-to-date market data for all traded stock symbols. <br /> <br /> Note: Snapshot data is cleared at 3:30am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
     * All Tickers
     */
    async v2SnapshotLocaleUsMarketsStocksTickersGetRaw(requestParameters: V2SnapshotLocaleUsMarketsStocksTickersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleUsMarketsStocksTickersGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['tickers'] != null) {
            queryParameters['tickers'] = requestParameters['tickers'];
        }

        if (requestParameters['includeOtc'] != null) {
            queryParameters['include_otc'] = requestParameters['includeOtc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/us/markets/stocks/tickers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleUsMarketsStocksTickersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the most up-to-date market data for all traded stock symbols. <br /> <br /> Note: Snapshot data is cleared at 3:30am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
     * All Tickers
     */
    async v2SnapshotLocaleUsMarketsStocksTickersGet(requestParameters: V2SnapshotLocaleUsMarketsStocksTickersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleUsMarketsStocksTickersGet200Response> {
        const response = await this.v2SnapshotLocaleUsMarketsStocksTickersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the most up-to-date market data for a single traded stock ticker. <br /> <br /> Note: Snapshot data is cleared at 3:30am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
     * Ticker
     */
    async v2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetRaw(requestParameters: V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet200Response>> {
        if (requestParameters['stocksTicker'] == null) {
            throw new runtime.RequiredError(
                'stocksTicker',
                'Required parameter "stocksTicker" was null or undefined when calling v2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKey authentication
        }

        const response = await this.request({
            path: `/v2/snapshot/locale/us/markets/stocks/tickers/{stocksTicker}`.replace(`{${"stocksTicker"}}`, encodeURIComponent(String(requestParameters['stocksTicker']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the most up-to-date market data for a single traded stock ticker. <br /> <br /> Note: Snapshot data is cleared at 3:30am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST. 
     * Ticker
     */
    async v2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet(requestParameters: V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2SnapshotLocaleUsMarketsStocksTickersStocksTickerGet200Response> {
        const response = await this.v2SnapshotLocaleUsMarketsStocksTickersStocksTickerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const V2SnapshotLocaleUsMarketsStocksDirectionGetDirectionEnum = {
    Gainers: 'gainers',
    Losers: 'losers'
} as const;
export type V2SnapshotLocaleUsMarketsStocksDirectionGetDirectionEnum = typeof V2SnapshotLocaleUsMarketsStocksDirectionGetDirectionEnum[keyof typeof V2SnapshotLocaleUsMarketsStocksDirectionGetDirectionEnum];
